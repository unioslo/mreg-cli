[build-system]
requires = ["setuptools >= 68.0", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "mreg-cli"
description = "MREG interactive command line client"
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
keywords = ["mreg", "cli", "interactive"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    'python-dateutil>=2.9.0',
    'prompt_toolkit>=3.0.0',
    'requests[socks]>=2.31.0',
    'typing_extensions>=4.12.0',
    "pydantic[email]>=2.7.1",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = ["ruff", "tox", "pyinstaller", "rich"]

[project.urls]
Repository = 'https://github.com/unioslo/mreg-cli/'

[project.scripts]
mreg-cli = "mreg_cli.main:main"

[tool.setuptools.packages.find]
include = ["mreg_cli*"]

[tool.black]
max-line-length = 99

[tool.isort]
profile = "black"
line_length = 99

[tool.ruff]
line-length = 99
# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    # "ANN", # annotations
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "E",   # error
    "F",   # Pyflakes
    "I",   # isort
    "ISC", # flake8-implicit-str-concat
    "INP", # flake8-no-pep420 (implicit namespace packages, you need __init__.py)
    #    "PL", # pylint (all of the below)
    "PLC", # pylint-convention
    "PLE", # pylint-error
    # "PLR", # pylint-refactor
    # "PLW", # pylint-warning
    "W", # warnings        
]
ignore = [
    # B905 (`zip()` without an explicit `strict=` parameter) is incompatible with older python versions.
    "B905",
    # D203 (1 blank line required before class docstring) is incompatible with
    # D211 (No blank lines allowed before class docstring). We ignore D203.
    "D203",
    # D213 (Multi-line docstring summary should start at the second line) is incompatible with
    # D212 (Multi-line docstring summary should start at the first line). We ignore D213.
    "D213",
    # ANN101 (Missing type annotation for `self` in method) is infered.
    "ANN101",

    # Rules disabled due to using ruff as a formatter. Most of these rules
    # will thus be enforced by the formatter.
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",   # Indentation contains tabs
    "E111",   # Indentation is not a multiple of four
    "E114",   # Indentation is not a multiple of four (comment)
    "E117",   # Over-indented
    "D206",   # Docstring should be indented with spaces, not tabs
    "D300",   # Use """triple double quotes""" (found '''-quotes)
    "Q000",   # Remove bad quotes (inlined)
    "Q001",   # Remove bad quotes (multiline)
    "Q002",   # Remove bad quotes (docstring)
    "Q003",   # Avoidable escape quote
    "COM812", # Missing trailing comma in Python 3.6+
    "COM819", # Prohibited trailing comma    
    "ISC001", # Implicit string concatenation (single line)
    "ISC002", # Implicit string concatenation (multiline)
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.setuptools_scm]
version_file = "mreg_cli/_version.py"
