[
  {
    "command": "zone create example.org hostmaster@example.org ns1.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone create example.org hostmaster@example.org ns1.example.org # should require force because ns1 is unknown",
    "ok": [],
    "warning": [
      "Host ns1.example.org not found.",
      "ns1.example.org is not in mreg, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/ns1.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/ns1.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone create example.org hostmaster@example.org ns1.example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone create example.org hostmaster@example.org ns1.example.org -force",
    "ok": [
      "Created zone example.org"
    ],
    "warning": [
      "Host ns1.example.org not found."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/ns1.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/ns1.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/zones/forward/",
        "data": {
          "name": "example.org",
          "email": "hostmaster@example.org",
          "primary_ns": [
            "ns1.example.org"
          ]
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns1.example.org",
              "ttl": null
            }
          ],
          "updated": false,
          "primary_ns": "ns1.example.org",
          "email": "hostmaster@example.org",
          "refresh": 10800,
          "retry": 3600,
          "expire": 1814400,
          "soa_ttl": 43200,
          "default_ttl": 43200,
          "name": "example.org"
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone info example.org",
    "command_filter": "Serialnumber",
    "command_filter_negate": true,
    "command_issued": "zone info example.org |! Serialnumber # Serialnumber includes the date: https://github.com/unioslo/mreg/blob/master/mreg/utils.py#L78",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: example.org",
      " Nameservers: hostname TTL",
      " ns1.example.org <not set>",
      "Primary NS: ns1.example.org",
      "Email: hostmaster@example.org",
      "Serial: <NUMBER>",
      "Refresh: 10800",
      "Retry: 3600",
      "Expire: 1814400",
      "SOA TTL: 43200",
      "Default TTL: 43200"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns1.example.org",
              "ttl": null
            }
          ],
          "updated": false,
          "primary_ns": "ns1.example.org",
          "email": "hostmaster@example.org",
          "refresh": 10800,
          "retry": 3600,
          "expire": 1814400,
          "soa_ttl": 43200,
          "default_ttl": 43200,
          "name": "example.org"
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone list -forward",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone list -forward",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Zones:",
      " example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "nameservers": [
                {
                  "name": "ns1.example.org",
                  "ttl": null
                }
              ],
              "updated": false,
              "primary_ns": "ns1.example.org",
              "email": "hostmaster@example.org",
              "refresh": 10800,
              "retry": 3600,
              "expire": 1814400,
              "soa_ttl": 43200,
              "default_ttl": 43200,
              "name": "example.org"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone set_ns example.org ns2.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone set_ns example.org ns2.example.org # requires force because ns2 is unknown",
    "ok": [],
    "warning": [
      "Host ns2.example.org not found.",
      "ns2.example.org is not in mreg, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns1.example.org",
              "ttl": null
            }
          ],
          "updated": false,
          "primary_ns": "ns1.example.org",
          "email": "hostmaster@example.org",
          "refresh": 10800,
          "retry": 3600,
          "expire": 1814400,
          "soa_ttl": 43200,
          "default_ttl": 43200,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/ns2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/ns2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone set_ns example.org ns2.example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone set_ns example.org ns2.example.org -force",
    "ok": [
      "Updated nameservers for example.org"
    ],
    "warning": [
      "Host ns2.example.org not found."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns1.example.org",
              "ttl": null
            }
          ],
          "updated": false,
          "primary_ns": "ns1.example.org",
          "email": "hostmaster@example.org",
          "refresh": 10800,
          "retry": 3600,
          "expire": 1814400,
          "soa_ttl": 43200,
          "default_ttl": 43200,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/ns2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/ns2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/zones/forward/example.org/nameservers",
        "data": {
          "primary_ns": [
            "ns2.example.org"
          ]
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "zone set_soa example.org -email hostperson@example.org -serialno 12345 -refresh 360 -retry 1800 -expire 2400 -soa-ttl 1800",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone set_soa example.org -email hostperson@example.org -serialno 12345 -refresh 360 -retry 1800 -expire 2400 -soa-ttl 1800",
    "ok": [
      "Updated SOA for example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostmaster@example.org",
          "refresh": 10800,
          "retry": 3600,
          "expire": 1814400,
          "soa_ttl": 43200,
          "default_ttl": 43200,
          "name": "example.org"
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/zones/forward/example.org",
        "data": {
          "email": "hostperson@example.org",
          "serialno": 12345,
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "nameservers": [
                {
                  "name": "ns2.example.org",
                  "ttl": null
                }
              ],
              "updated": true,
              "primary_ns": "ns2.example.org",
              "email": "hostperson@example.org",
              "refresh": 360,
              "retry": 1800,
              "expire": 2400,
              "soa_ttl": 1800,
              "default_ttl": 43200,
              "name": "example.org"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone set_default_ttl example.org 60",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone set_default_ttl example.org 60 # should fail, must be >= 300",
    "ok": [],
    "warning": [
      "Invalid TTL value: 60 (300->68400)"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 43200,
          "name": "example.org"
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone set_default_ttl example.org 300",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone set_default_ttl example.org 300",
    "ok": [
      "Set default TTL for example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 43200,
          "name": "example.org"
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/zones/forward/example.org",
        "data": {
          "default_ttl": 300
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "nameservers": [
                {
                  "name": "ns2.example.org",
                  "ttl": null
                }
              ],
              "updated": true,
              "primary_ns": "ns2.example.org",
              "email": "hostperson@example.org",
              "refresh": 360,
              "retry": 1800,
              "expire": 2400,
              "soa_ttl": 1800,
              "default_ttl": 300,
              "name": "example.org"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv4>/28 -desc \"TinyNet\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv4>/28 -desc \"TinyNet\"",
    "ok": [
      "created network <IPv4>/28"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "frozen": false
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      }
    ],
    "time": null
  },
  {
    "command": "network list_used_addresses <IPv4>/28",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network list_used_addresses <IPv4>/28",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "No used addresses on network <IPv4>/28"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28/used_host_list",
        "data": {},
        "status": 200,
        "response": {}
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28/ptroverride_host_list",
        "data": {},
        "status": 200,
        "response": {}
      }
    ],
    "time": null
  },
  {
    "command": "network list_unused_addresses <IPv4>/28",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network list_unused_addresses <IPv4>/28",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28/unused_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      }
    ],
    "time": null
  },
  {
    "command": "network set_reserved <IPv4>/28 8",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_reserved <IPv4>/28 8",
    "ok": [
      "Updated reserved to '8' for <IPv4>/28"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {
          "reserved": 8
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [],
              "network": "<IPv4>/28",
              "description": "TinyNet",
              "vlan": null,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": false,
              "reserved": 8
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add tinyhost -ip <IPv4>/28 -contact tinyhost@example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add tinyhost -ip <IPv4>/28 -contact tinyhost@example.org",
    "ok": [
      "Created host tinyhost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: tinyhost.example.org",
      "Contact: tinyhost@example.org",
      "A_Records IP MAC",
      " <IPv4> <not set>",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/tinyhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 8
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "tinyhost.example.org",
          "contact": "tinyhost@example.org",
          "network": "<IPv4>/28"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 1
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 1
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "tinyhost.example.org",
          "contact": "tinyhost@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "network list_used_addresses <IPv4>/28",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network list_used_addresses <IPv4>/28",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<IPv4> tinyhost.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 8
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28/used_host_list",
        "data": {},
        "status": 200,
        "response": {
          "<IPv4>": [
            "tinyhost.example.org"
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28/ptroverride_host_list",
        "data": {},
        "status": 200,
        "response": {}
      }
    ],
    "time": null
  },
  {
    "command": "network list_unused_addresses <IPv4>/28",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network list_unused_addresses <IPv4>/28",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> ",
      "<IPv4> "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 8
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28/unused_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      }
    ],
    "time": null
  },
  {
    "command": "host remove tinyhost",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove tinyhost",
    "ok": [
      "removed tinyhost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 1
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 1
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "tinyhost.example.org",
          "contact": "tinyhost@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv4>/28 -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv4>/28 -force",
    "ok": [
      "Removed network <IPv4>/28"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/28",
          "description": "TinyNet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 8
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/28/used_count",
        "data": {},
        "status": 200,
        "response": 0
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/<IPv4>/28",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv6>::/64 -desc \"Lorem ipsum dolor sit amet\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv6>::/64 -desc \"Lorem ipsum dolor sit amet\"",
    "ok": [
      "created network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "frozen": false
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv6>::/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      }
    ],
    "time": null
  },
  {
    "command": "network list_used_addresses <IPv6>::/64",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network list_used_addresses <IPv6>::/64",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "No used addresses on network <IPv6>::/64"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/used_host_list",
        "data": {},
        "status": 200,
        "response": {}
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/ptroverride_host_list",
        "data": {},
        "status": 200,
        "response": {}
      }
    ],
    "time": null
  },
  {
    "command": "network list_unused_addresses <IPv6>::/64",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network list_unused_addresses <IPv6>::/64",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> ",
      "<IPv6> "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/unused_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      }
    ],
    "time": null
  },
  {
    "command": "network set_reserved <IPv6>::/64 50",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_reserved <IPv6>::/64 50",
    "ok": [
      "Updated reserved to '50' for <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {
          "reserved": 50
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [],
              "network": "<IPv6>::/64",
              "description": "Lorem ipsum dolor sit amet",
              "vlan": null,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": false,
              "reserved": 50
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add tinyhost -ip <IPv6>::/64 -contact me@example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add tinyhost -ip <IPv6>::/64 -contact me@example.org",
    "ok": [
      "Created host tinyhost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: tinyhost.example.org",
      "Contact: me@example.org",
      "AAAA_Records IP MAC",
      " <IPv6> <not set>",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/tinyhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 50
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "tinyhost.example.org",
          "contact": "me@example.org",
          "network": "<IPv6>::/64"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 2
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 2
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "tinyhost.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host info tinyhost",
    "command_filter": "2001",
    "command_filter_negate": false,
    "command_issued": "host info tinyhost | 2001",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      " <IPv6> <not set>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 2
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 2
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "tinyhost.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host info tinyhost",
    "command_filter": "example.org",
    "command_filter_negate": true,
    "command_issued": "host info tinyhost |! example.org",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "AAAA_Records IP MAC",
      " <IPv6> <not set>",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 2
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 2
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "tinyhost.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove tinyhost",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove tinyhost",
    "ok": [
      "removed tinyhost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 2
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 2
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "tinyhost.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=2",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/tinyhost.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv6>::/64 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv6>::/64 -f",
    "ok": [
      "Removed network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 50
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/used_count",
        "data": {},
        "status": 200,
        "response": 0
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv4>/24 -desc \"Frozzzen\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv4>/24 -desc \"Frozzzen\" # frozen network",
    "ok": [
      "created network <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "frozen": false
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      }
    ],
    "time": null
  },
  {
    "command": "network set_frozen <IPv4>/24",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_frozen <IPv4>/24",
    "ok": [
      "Updated frozen to 'True' for <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {
          "frozen": true
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=3",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [],
              "network": "<IPv4>/24",
              "description": "Frozzzen",
              "vlan": null,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": true,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add somehost -ip <IPv4>/24 -contact support@example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add somehost -ip <IPv4>/24 -contact support@example.org # should require force, because net's frozen",
    "ok": [],
    "warning": [
      "Network <IPv4>/24 is frozen, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      }
    ],
    "time": null
  },
  {
    "command": "network add_excluded_range <IPv4>/24 <IPv4> <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network add_excluded_range <IPv4>/24 <IPv4> <IPv4>",
    "ok": [
      "Added exclude range to <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/<IPv4>/24/excluded_ranges/",
        "data": {
          "network": 3,
          "start_ip": "<IPv4>",
          "end_ip": "<IPv4>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host add somehost -ip <IPv4> -contact support@example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add somehost -ip <IPv4> -contact support@example.org -force # should fail because ip is in excluded range",
    "ok": [],
    "warning": [
      "POST \"http://<IPv4>:8000/api/v1/hosts/\": 400: Bad Request\n{\n \"non_field_errors\": [\n \"IP <IPv4> in an excluded range: <IPv4>/24 -> [<IPv4> -> [<IPv4>]\"\n ]\n}"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ipaddress": "<IPv4>"
        },
        "status": 400,
        "response": {
          "non_field_errors": [
            "IP <IPv4> in an excluded range: <IPv4>/24 -> [<IPv4> -> [<IPv4>]"
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add somehost -ip <IPv4>/24 -contact support@example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add somehost -ip <IPv4>/24 -contact support@example.org -force",
    "ok": [
      "Created host somehost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: somehost.example.org",
      "Contact: support@example.org",
      "A_Records IP MAC",
      " <IPv4> <not set>",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "network": "<IPv4>/24"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 4
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "network list_used_addresses <IPv4>/24",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network list_used_addresses <IPv4>/24",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<IPv4> somehost.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/used_host_list",
        "data": {},
        "status": 200,
        "response": {
          "<IPv4>": [
            "somehost.example.org"
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/ptroverride_host_list",
        "data": {},
        "status": 200,
        "response": {}
      }
    ],
    "time": null
  },
  {
    "command": "network set_description <IPv4>/24 \"Frozen but has one host\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_description <IPv4>/24 \"Frozen but has one host\"",
    "ok": [
      "Updated description to 'Frozen but has one host' for <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozzzen",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {
          "description": "Frozen but has one host"
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=3",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [
                {
                  "start_ip": "<IPv4>",
                  "end_ip": "<IPv4>",
                  "network": 3
                }
              ],
              "network": "<IPv4>/24",
              "description": "Frozen but has one host",
              "vlan": null,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": true,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "network set_category <IPv4>/24 cat1",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_category <IPv4>/24 cat1",
    "ok": [
      "Updated category tag to 'cat1' for <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {
          "category": "cat1"
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=3",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [
                {
                  "start_ip": "<IPv4>",
                  "end_ip": "<IPv4>",
                  "network": 3
                }
              ],
              "network": "<IPv4>/24",
              "description": "Frozen but has one host",
              "vlan": null,
              "dns_delegated": false,
              "category": "cat1",
              "location": "",
              "frozen": true,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "network set_location <IPv4>/24 loc1",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_location <IPv4>/24 loc1",
    "ok": [
      "Updated location tag to 'loc1' for <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "cat1",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {
          "location": "loc1"
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=3",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [
                {
                  "start_ip": "<IPv4>",
                  "end_ip": "<IPv4>",
                  "network": 3
                }
              ],
              "network": "<IPv4>/24",
              "description": "Frozen but has one host",
              "vlan": null,
              "dns_delegated": false,
              "category": "cat1",
              "location": "loc1",
              "frozen": true,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "network set_vlan <IPv4>/24 1234",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_vlan <IPv4>/24 1234",
    "ok": [
      "Updated vlan to 1234 for <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {
          "vlan": 1234
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=3",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [
                {
                  "start_ip": "<IPv4>",
                  "end_ip": "<IPv4>",
                  "network": 3
                }
              ],
              "network": "<IPv4>/24",
              "description": "Frozen but has one host",
              "vlan": 1234,
              "dns_delegated": false,
              "category": "cat1",
              "location": "loc1",
              "frozen": true,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "network info <IPv4>/24",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network info <IPv4>/24",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Network: <IPv4>/24",
      "Netmask: <IPv4>",
      "Description: Frozen but has one host",
      "Category: cat1",
      "Location: loc1",
      "VLAN: 1234",
      "DNS delegated: False",
      "Frozen: True",
      "IP-range: <IPv4> - <IPv4>",
      "Reserved host addresses: 3",
      " <IPv4> (net)",
      " <IPv4>",
      " <IPv4>",
      " <IPv4>",
      " <IPv4> (broadcast)",
      "Excluded ranges: 11 ipaddresses",
      " <IPv4> -> <IPv4>",
      "Used addresses: 1",
      "Unused addresses: 239 (excluding reserved adr.)"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/used_count",
        "data": {},
        "status": 200,
        "response": 1
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/unused_count",
        "data": {},
        "status": 200,
        "response": 239
      }
    ],
    "time": null
  },
  {
    "command": "network find -network <IPv4>/24 -description '*one host*' -vlan 1234 -frozen 1 -reserved 6 -dns_delegated 0 -category Yellow -location Somewhere",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network find -network <IPv4>/24 -description '*one host*' -vlan 1234 -frozen 1 -reserved 6 -dns_delegated 0 -category Yellow -location Somewhere",
    "ok": [],
    "warning": [
      "No networks matching the query were found."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/?network=<IPv4>%2F24&description__regex=.%2Aone+host.%2A&vlan=1234&dns_delegated=0&category=Yellow&location=Somewhere&frozen=1&reserved=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host set_contact somehost \"new-support@example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host set_contact somehost \"new-support@example.org\"",
    "ok": [
      "Updated contact of somehost.example.org to new-support@example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 4
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {
          "contact": "new-support@example.org"
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?id=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "",
                  "ipaddress": "<IPv4>",
                  "host": 4
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 4
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "somehost.example.org",
              "contact": "new-support@example.org",
              "ttl": null,
              "comment": "",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host history somehost",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host history somehost",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<TIME> [system-signals]: Txt create: txt = 'v=spf1 -all'",
      "<TIME> [test]: Host create: name = 'somehost.example.org', contact = 'support@example.org'",
      "<TIME> [test]: Ipaddress create: ipaddress = '<IPv4>'",
      "<TIME> [test]: Host update: contact: support@example.org -> new-support@example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=host&name=somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 4,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "system-signals",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Txt",
              "action": "create",
              "data": {
                "txt": "v=spf1 -all"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Host",
              "action": "create",
              "data": "{\"name\": \"somehost.example.org\", \"contact\": \"support@example.org\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Ipaddress",
              "action": "create",
              "data": "{\"ipaddress\": \"<IPv4>\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Host",
              "action": "update",
              "data": "{\"current_data\": {\"id\": 4, \"ipaddresses\": [{\"id\": 3, \"macaddress\": \"\", \"created_at\": \"<TIME>\", \"updated_at\": \"<TIME>\", \"ipaddress\": \"<IPv4>\", \"host\": 4}], \"cnames\": [], \"mxs\": [], \"txts\": [{\"id\": 4, \"created_at\": \"<TIME>\", \"updated_at\": \"<TIME>\", \"txt\": \"v=spf1 -all\", \"host\": 4}], \"ptr_overrides\": [], \"hinfo\": null, \"loc\": null, \"bacnetid\": null, \"created_at\": \"<TIME>\", \"updated_at\": \"<TIME>\", \"name\": \"somehost.example.org\", \"contact\": \"support@example.org\", \"ttl\": null, \"comment\": \"\", \"zone\": 1}, \"update\": {\"contact\": \"new-support@example.org\"}}"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=host&model_id__in=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 4,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "system-signals",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Txt",
              "action": "create",
              "data": {
                "txt": "v=spf1 -all"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Host",
              "action": "create",
              "data": "{\"name\": \"somehost.example.org\", \"contact\": \"support@example.org\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Ipaddress",
              "action": "create",
              "data": "{\"ipaddress\": \"<IPv4>\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "host",
              "name": "somehost.example.org",
              "model_id": 4,
              "model": "Host",
              "action": "update",
              "data": "{\"current_data\": {\"id\": 4, \"ipaddresses\": [{\"id\": 3, \"macaddress\": \"\", \"created_at\": \"<TIME>\", \"updated_at\": \"<TIME>\", \"ipaddress\": \"<IPv4>\", \"host\": 4}], \"cnames\": [], \"mxs\": [], \"txts\": [{\"id\": 4, \"created_at\": \"<TIME>\", \"updated_at\": \"<TIME>\", \"txt\": \"v=spf1 -all\", \"host\": 4}], \"ptr_overrides\": [], \"hinfo\": null, \"loc\": null, \"bacnetid\": null, \"created_at\": \"<TIME>\", \"updated_at\": \"<TIME>\", \"name\": \"somehost.example.org\", \"contact\": \"support@example.org\", \"ttl\": null, \"comment\": \"\", \"zone\": 1}, \"update\": {\"contact\": \"new-support@example.org\"}}"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?data__relation=hosts&data__id__in=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_add somehost <IPv4>/24",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add somehost <IPv4>/24 # should require force, because the network is frozen",
    "ok": [],
    "warning": [
      "Network <IPv4>/24 is frozen, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 4
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "new-support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/first_unused",
        "data": {},
        "status": 200,
        "response": "<IPv4>"
      }
    ],
    "time": null
  },
  {
    "command": "host a_add somehost <IPv4>/24 -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add somehost <IPv4>/24 -force",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 4
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "new-support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/first_unused",
        "data": {},
        "status": 200,
        "response": "<IPv4>"
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "ipaddress": "<IPv4>",
          "host": "4"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv4>",
          "host": 4
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?id=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "",
                  "ipaddress": "<IPv4>",
                  "host": 4
                },
                {
                  "macaddress": "",
                  "ipaddress": "<IPv4>",
                  "host": 4
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 4
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "somehost.example.org",
              "contact": "new-support@example.org",
              "ttl": null,
              "comment": "",
              "zone": 1
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?id=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "",
                  "ipaddress": "<IPv4>",
                  "host": 4
                },
                {
                  "macaddress": "",
                  "ipaddress": "<IPv4>",
                  "host": 4
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 4
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "somehost.example.org",
              "contact": "new-support@example.org",
              "ttl": null,
              "comment": "",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove somehost",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove somehost # requires force because host has 2 ip addresses",
    "ok": [],
    "warning": [
      "somehost.example.org requires force and override for deletion:\n multiple ipaddresses on the same VLAN. Must use 'force'."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 4
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "new-support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove somehost -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove somehost -force",
    "ok": [
      "removed somehost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 4
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 4
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "new-support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network unset_frozen <IPv4>/24",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network unset_frozen <IPv4>/24",
    "ok": [
      "Updated frozen to 'False' for <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {
          "frozen": false
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=3",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [
                {
                  "start_ip": "<IPv4>",
                  "end_ip": "<IPv4>",
                  "network": 3
                }
              ],
              "network": "<IPv4>/24",
              "description": "Frozen but has one host",
              "vlan": 1234,
              "dns_delegated": false,
              "category": "cat1",
              "location": "loc1",
              "frozen": false,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add otherhost -ip <IPv4> -contact support@example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add otherhost -ip <IPv4> -contact support@example.org # fails because reserved range",
    "ok": [],
    "warning": [
      "POST \"http://<IPv4>:8000/api/v1/hosts/\": 400: Bad Request\n{\n \"non_field_errors\": [\n \"IP <IPv4> in an excluded range: <IPv4>/24 -> [<IPv4> -> [<IPv4>]\"\n ]\n}"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/otherhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/otherhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/otherhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "otherhost.example.org",
          "contact": "support@example.org",
          "ipaddress": "<IPv4>"
        },
        "status": 400,
        "response": {
          "non_field_errors": [
            "IP <IPv4> in an excluded range: <IPv4>/24 -> [<IPv4> -> [<IPv4>]"
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "network remove_excluded_range <IPv4>/24 <IPv4> <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove_excluded_range <IPv4>/24 <IPv4> <IPv4>",
    "ok": [
      "Removed exclude range from <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv4>",
              "end_ip": "<IPv4>",
              "network": 3
            }
          ],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/<IPv4>/24/excluded_ranges/1",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add otherhost -ip <IPv4> -contact support@example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add otherhost -ip <IPv4> -contact support@example.org # should not need force now that net is unfrozen",
    "ok": [
      "Created host otherhost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: otherhost.example.org",
      "Contact: support@example.org",
      "A_Records IP MAC",
      " <IPv4> <not set>",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/otherhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/otherhost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/otherhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "otherhost.example.org",
          "contact": "support@example.org",
          "ipaddress": "<IPv4>"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/otherhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 6
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 6
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "otherhost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove otherhost",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove otherhost",
    "ok": [
      "removed otherhost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/otherhost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 6
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 6
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "otherhost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=6",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/otherhost.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv4>/24 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv4>/24 -f",
    "ok": [
      "Removed network <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "Frozen but has one host",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "cat1",
          "location": "loc1",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/used_count",
        "data": {},
        "status": 200,
        "response": 0
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv6>::/64 -desc \"Lorem ipsum dolor sit amet\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv6>::/64 -desc \"Lorem ipsum dolor sit amet\"",
    "ok": [
      "created network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "frozen": false
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv6>::/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      }
    ],
    "time": null
  },
  {
    "command": "network set_frozen <IPv6>::/64",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_frozen <IPv6>::/64",
    "ok": [
      "Updated frozen to 'True' for <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {
          "frozen": true
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [],
              "network": "<IPv6>::/64",
              "description": "Lorem ipsum dolor sit amet",
              "vlan": null,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": true,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add somehost -ip <IPv6>::/64 -contact m@example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add somehost -ip <IPv6>::/64 -contact m@example.org # should require force, because the network is frozen",
    "ok": [],
    "warning": [
      "Network <IPv6>::/64 is frozen, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      }
    ],
    "time": null
  },
  {
    "command": "network add_excluded_range <IPv6>::/64 <IPv6> <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network add_excluded_range <IPv6>::/64 <IPv6> <IPv6>",
    "ok": [
      "Added exclude range to <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/excluded_ranges/",
        "data": {
          "network": 4,
          "start_ip": "<IPv6>",
          "end_ip": "<IPv6>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host add somehost -ip <IPv6> -contact support@example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add somehost -ip <IPv6> -contact support@example.org -force # should fail, because the address is in a reserved range",
    "ok": [],
    "warning": [
      "POST \"http://<IPv4>:8000/api/v1/hosts/\": 400: Bad Request\n{\n \"non_field_errors\": [\n \"IP <IPv6> in an excluded range: <IPv6>::/64 -> [<IPv6> -> [<IPv6>]\"\n ]\n}"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A20",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ipaddress": "<IPv6>"
        },
        "status": 400,
        "response": {
          "non_field_errors": [
            "IP <IPv6> in an excluded range: <IPv6>::/64 -> [<IPv6> -> [<IPv6>]"
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add somehost -ip <IPv6>::/64 -contact support@example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add somehost -ip <IPv6>::/64 -contact support@example.org -force",
    "ok": [
      "Created host somehost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: somehost.example.org",
      "Contact: support@example.org",
      "AAAA_Records IP MAC",
      " <IPv6> <not set>",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/somehost.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "network": "<IPv6>::/64"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 8
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 8
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "network set_description <IPv6>::/64 \"Frozen but has one host\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network set_description <IPv6>::/64 \"Frozen but has one host\"",
    "ok": [
      "Updated description to 'Frozen but has one host' for <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Lorem ipsum dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {
          "description": "Frozen but has one host"
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/?id=4",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [
                {
                  "start_ip": "<IPv6>",
                  "end_ip": "<IPv6>",
                  "network": 4
                }
              ],
              "network": "<IPv6>::/64",
              "description": "Frozen but has one host",
              "vlan": null,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": true,
              "reserved": 3
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "network info <IPv6>::/64",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network info <IPv6>::/64",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Network: <IPv6>::/64",
      "Netmask: <IPv6>::",
      "Description: Frozen but has one host",
      "Category: ",
      "Location: ",
      "VLAN: None",
      "DNS delegated: False",
      "Frozen: True",
      "IP-range: <IPv6>:: - <IPv6>",
      "Reserved host addresses: 3",
      " <IPv6>:: (net)",
      " <IPv6>",
      " <IPv6>",
      " <IPv6>",
      "Excluded ranges: 17 ipaddresses",
      " <IPv6> -> <IPv6>",
      "Used addresses: 1",
      "Unused addresses: 18446744073709551594 (excluding reserved adr.)"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/used_count",
        "data": {},
        "status": 200,
        "response": 1
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/unused_count",
        "data": {},
        "status": 200,
        "response": 18446744073709551594
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_add somehost <IPv6>::/64",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_add somehost <IPv6>::/64 # should require force, because the network is frozen",
    "ok": [],
    "warning": [
      "Network <IPv6>::/64 is frozen, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 8
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 8
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/first_unused",
        "data": {},
        "status": 200,
        "response": "<IPv6>"
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_add somehost <IPv6>::/64 -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_add somehost <IPv6>::/64 -force",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 8
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 8
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/first_unused",
        "data": {},
        "status": 200,
        "response": "<IPv6>"
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "ipaddress": "<IPv6>",
          "host": "8"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv6>",
          "host": 8
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?id=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "",
                  "ipaddress": "<IPv6>",
                  "host": 8
                },
                {
                  "macaddress": "",
                  "ipaddress": "<IPv6>",
                  "host": 8
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 8
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "somehost.example.org",
              "contact": "support@example.org",
              "ttl": null,
              "comment": "",
              "zone": 1
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?id=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "",
                  "ipaddress": "<IPv6>",
                  "host": 8
                },
                {
                  "macaddress": "",
                  "ipaddress": "<IPv6>",
                  "host": 8
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 8
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "somehost.example.org",
              "contact": "support@example.org",
              "ttl": null,
              "comment": "",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove somehost -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove somehost -force",
    "ok": [
      "removed somehost.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 8
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 8
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 8
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "somehost.example.org",
          "contact": "support@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A4",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3Abae0%3A964%3A14d5%3Ac553",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=8",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/somehost.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv6>::/64 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv6>::/64 -f",
    "ok": [
      "Removed network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [
            {
              "start_ip": "<IPv6>",
              "end_ip": "<IPv6>",
              "network": 4
            }
          ],
          "network": "<IPv6>::/64",
          "description": "Frozen but has one host",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": true,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/used_count",
        "data": {},
        "status": 200,
        "response": 0
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "group create mygroup \"This describes the group\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group create mygroup \"This describes the group\"",
    "ok": [
      "Created new group mygroup"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostgroups/",
        "data": {
          "name": "mygroup",
          "description": "This describes the group"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [],
          "owners": [],
          "name": "mygroup",
          "description": "This describes the group"
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add testhost1",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add testhost1",
    "ok": [
      "Created host testhost1.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: testhost1.example.org",
      "Contact: ",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost1.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/testhost1.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/testhost1.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "testhost1.example.org"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost1.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 9
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost1.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=9",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=9",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=9",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=9",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=9",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add testhost2",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add testhost2",
    "ok": [
      "Created host testhost2.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: testhost2.example.org",
      "Contact: ",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/testhost2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/testhost2.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "testhost2.example.org"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost2.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 10
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost2.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=10",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=10",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=10",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=10",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=10",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "group host_add mygroup testhost1",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group host_add mygroup testhost1",
    "ok": [
      "Added host 'testhost1.example.org' to 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [],
          "owners": [],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost1.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 9
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost1.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostgroups/mygroup/hosts/",
        "data": {
          "name": "testhost1.example.org"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                }
              ],
              "owners": [],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group host_add mygroup testhost2",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group host_add mygroup testhost2",
    "ok": [
      "Added host 'testhost2.example.org' to 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost2.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 10
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost2.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostgroups/mygroup/hosts/",
        "data": {
          "name": "testhost2.example.org"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                },
                {
                  "name": "testhost2.example.org"
                }
              ],
              "owners": [],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group owner_add mygroup myself",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group owner_add mygroup myself",
    "ok": [
      "Added owner 'myself' to 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            },
            {
              "name": "testhost2.example.org"
            }
          ],
          "owners": [],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostgroups/mygroup/owners/",
        "data": {
          "name": "myself"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                },
                {
                  "name": "testhost2.example.org"
                }
              ],
              "owners": [
                {
                  "name": "myself"
                }
              ],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group host_remove mygroup testhost2",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group host_remove mygroup testhost2",
    "ok": [
      "Removed host 'testhost2.example.org' from 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            },
            {
              "name": "testhost2.example.org"
            }
          ],
          "owners": [
            {
              "name": "myself"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost2.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 10
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost2.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostgroups/mygroup/hosts/testhost2.example.org",
        "data": {},
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                }
              ],
              "owners": [
                {
                  "name": "myself"
                }
              ],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group info mygroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group info mygroup",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: mygroup",
      "Description: This describes the group",
      "Owners: myself",
      "Parents: ",
      "Groups: ",
      "Hosts: 1",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "myself"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      }
    ],
    "time": null
  },
  {
    "command": "group history mygroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group history mygroup",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<TIME> [test]: HostGroup create: name = 'mygroup', description = 'This describes the group'",
      "<TIME> [test]: Host add: testhost1.example.org",
      "<TIME> [test]: Host add: testhost2.example.org",
      "<TIME> [test]: Group add: myself",
      "<TIME> [test]: Host remove: testhost2.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=group&name=mygroup",
        "data": {},
        "status": 200,
        "response": {
          "count": 5,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "create",
              "data": "{\"name\": \"mygroup\", \"description\": \"This describes the group\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost1.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "add",
              "data": {
                "name": "myself",
                "relation": "owners"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "remove",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=group&model_id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 5,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "create",
              "data": "{\"name\": \"mygroup\", \"description\": \"This describes the group\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost1.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "add",
              "data": {
                "name": "myself",
                "relation": "owners"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "remove",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?data__relation=groups&data__id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "group create yourgroup \"meh\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group create yourgroup \"meh\"",
    "ok": [
      "Created new group yourgroup"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/yourgroup",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostgroups/",
        "data": {
          "name": "yourgroup",
          "description": "meh"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/yourgroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [],
          "owners": [],
          "name": "yourgroup",
          "description": "meh"
        }
      }
    ],
    "time": null
  },
  {
    "command": "group group_add mygroup yourgroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group group_add mygroup yourgroup",
    "ok": [
      "Added group 'yourgroup' to 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/yourgroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [],
          "owners": [],
          "name": "yourgroup",
          "description": "meh"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "myself"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostgroups/mygroup/groups/",
        "data": {
          "name": "yourgroup"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [
                {
                  "name": "yourgroup"
                }
              ],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                }
              ],
              "owners": [
                {
                  "name": "myself"
                }
              ],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group info mygroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group info mygroup",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: mygroup",
      "Description: This describes the group",
      "Owners: myself",
      "Parents: ",
      "Groups: yourgroup",
      "Hosts: 1",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [
            {
              "name": "yourgroup"
            }
          ],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "myself"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      }
    ],
    "time": null
  },
  {
    "command": "group group_remove mygroup yourgroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group group_remove mygroup yourgroup",
    "ok": [
      "Removed group 'yourgroup' from 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [
            {
              "name": "yourgroup"
            }
          ],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "myself"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostgroups/mygroup/groups/yourgroup",
        "data": {},
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                }
              ],
              "owners": [
                {
                  "name": "myself"
                }
              ],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group owner_add mygroup anotherowner",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group owner_add mygroup anotherowner",
    "ok": [
      "Added owner 'anotherowner' to 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "myself"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostgroups/mygroup/owners/",
        "data": {
          "name": "anotherowner"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                }
              ],
              "owners": [
                {
                  "name": "anotherowner"
                },
                {
                  "name": "myself"
                }
              ],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group owner_remove mygroup myself",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group owner_remove mygroup myself",
    "ok": [
      "Removed owner 'myself' from 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "anotherowner"
            },
            {
              "name": "myself"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostgroups/mygroup/owners/myself",
        "data": {},
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?id=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "parent": [],
              "groups": [],
              "hosts": [
                {
                  "name": "testhost1.example.org"
                }
              ],
              "owners": [
                {
                  "name": "anotherowner"
                }
              ],
              "name": "mygroup",
              "description": "This describes the group"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "group history mygroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group history mygroup",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<TIME> [test]: HostGroup create: name = 'mygroup', description = 'This describes the group'",
      "<TIME> [test]: Host add: testhost1.example.org",
      "<TIME> [test]: Host add: testhost2.example.org",
      "<TIME> [test]: Group add: myself",
      "<TIME> [test]: Host remove: testhost2.example.org",
      "<TIME> [test]: HostGroup add: yourgroup",
      "<TIME> [test]: HostGroup remove: yourgroup",
      "<TIME> [test]: Group add: anotherowner",
      "<TIME> [test]: Group remove: myself"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=group&name=mygroup",
        "data": {},
        "status": 200,
        "response": {
          "count": 9,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "create",
              "data": "{\"name\": \"mygroup\", \"description\": \"This describes the group\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost1.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "add",
              "data": {
                "name": "myself",
                "relation": "owners"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "remove",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "add",
              "data": {
                "name": "yourgroup",
                "relation": "groups"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "remove",
              "data": {
                "name": "yourgroup",
                "relation": "groups"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "add",
              "data": {
                "name": "anotherowner",
                "relation": "owners"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "remove",
              "data": {
                "name": "myself",
                "relation": "owners"
              }
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=group&model_id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 9,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "create",
              "data": "{\"name\": \"mygroup\", \"description\": \"This describes the group\"}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost1.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "add",
              "data": {
                "name": "myself",
                "relation": "owners"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Host",
              "action": "remove",
              "data": {
                "name": "testhost2.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "add",
              "data": {
                "name": "yourgroup",
                "relation": "groups"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "HostGroup",
              "action": "remove",
              "data": {
                "name": "yourgroup",
                "relation": "groups"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "add",
              "data": {
                "name": "anotherowner",
                "relation": "owners"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "group",
              "name": "mygroup",
              "model_id": 1,
              "model": "Group",
              "action": "remove",
              "data": {
                "name": "myself",
                "relation": "owners"
              }
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?data__relation=groups&data__id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "group delete mygroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group delete mygroup # fails because the group contains testhost1, must force",
    "ok": [],
    "warning": [
      "Group contains hosts or groups, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "anotherowner"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      }
    ],
    "time": null
  },
  {
    "command": "group delete mygroup -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group delete mygroup -force",
    "ok": [
      "Deleted group 'mygroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [
            {
              "name": "testhost1.example.org"
            }
          ],
          "owners": [
            {
              "name": "anotherowner"
            }
          ],
          "name": "mygroup",
          "description": "This describes the group"
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostgroups/mygroup",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "group delete yourgroup",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "group delete yourgroup",
    "ok": [
      "Deleted group 'yourgroup'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/yourgroup",
        "data": {},
        "status": 200,
        "response": {
          "parent": [],
          "groups": [],
          "hosts": [],
          "owners": [],
          "name": "yourgroup",
          "description": "meh"
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostgroups/yourgroup",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host remove testhost1",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove testhost1",
    "ok": [
      "removed testhost1.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost1.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 9
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost1.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=9",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=9",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/testhost1.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host remove testhost2",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove testhost2",
    "ok": [
      "removed testhost2.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost2.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 10
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost2.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=10",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=10",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/testhost2.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "zone delegation_create example.org wut.example.org ns2.example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone delegation_create example.org wut.example.org ns2.example.org -force",
    "ok": [
      "Created zone delegation wut.example.org"
    ],
    "warning": [
      "Host ns2.example.org not found."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 300,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/ns2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/ns2.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/zones/forward/example.org/delegations/",
        "data": {
          "name": "wut.example.org",
          "nameservers": [
            "ns2.example.org"
          ]
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "name": "wut.example.org",
          "comment": "",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "zone delegation_comment_set example.org wut.example.org \"This is a comment\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone delegation_comment_set example.org wut.example.org \"This is a comment\"",
    "ok": [
      "Updated comment for wut.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 300,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "name": "wut.example.org",
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {
          "comment": "This is a comment"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "zone delegation_list example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone delegation_list example.org",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Delegations:",
      " wut.example.org",
      " Comment: This is a comment",
      " Nameservers: hostname TTL",
      " ns2.example.org <not set>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 300,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org/delegations/",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "nameservers": [
                {
                  "name": "ns2.example.org",
                  "ttl": null
                }
              ],
              "name": "wut.example.org",
              "comment": "This is a comment",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add testhost.wut.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add testhost.wut.example.org # should fail: host is in delegation, should require force",
    "ok": [],
    "warning": [
      "testhost.wut.example.org is in zone delegation wut.example.org, must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost.wut.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/testhost.wut.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/testhost.wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "delegation": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "name": "wut.example.org",
            "comment": "This is a comment",
            "zone": 1
          }
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add testhost.wut.example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add testhost.wut.example.org -force # should work",
    "ok": [
      "Created host testhost.wut.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: testhost.wut.example.org",
      "Contact: ",
      "TTL: (Default)",
      "Created: <TIME>",
      "Updated: <TIME>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost.wut.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/testhost.wut.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/testhost.wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "delegation": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "name": "wut.example.org",
            "comment": "This is a comment",
            "zone": 1
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "testhost.wut.example.org"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost.wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost.wut.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": null
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts=11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostgroups/?hosts=11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove testhost.wut.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove testhost.wut.example.org",
    "ok": [
      "removed testhost.wut.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/testhost.wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "testhost.wut.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": null
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/testhost.wut.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "zone delegation_comment_remove example.org wut.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone delegation_comment_remove example.org wut.example.org",
    "ok": [
      "Removed comment for wut.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 300,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "name": "wut.example.org",
          "comment": "This is a comment",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {
          "comment": ""
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "zone delegation_delete example.org wut.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone delegation_delete example.org wut.example.org",
    "ok": [
      "Removed zone delegation wut.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 300,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "name": "wut.example.org",
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/zones/forward/example.org/delegations/wut.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy atom_create apple \"Here's the description\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy atom_create apple \"Here's the description\"",
    "ok": [
      "Created new atom apple"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/apple",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostpolicy/atoms/",
        "data": {
          "name": "apple",
          "description": "Here's the description"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/apple",
        "data": {},
        "status": 200,
        "response": {
          "roles": [],
          "description": "Here's the description",
          "name": "apple"
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy atom_create -created <TIME> orange \"Round and orange\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy atom_create -created <TIME> orange \"Round and orange\"",
    "ok": [
      "Created new atom orange"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/orange",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostpolicy/atoms/",
        "data": {
          "name": "orange",
          "description": "Round and orange",
          "create_date": "<TIME>"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/orange",
        "data": {},
        "status": 200,
        "response": {
          "roles": [],
          "description": "Round and orange",
          "name": "orange"
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy list_atoms *",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy list_atoms *",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "apple \"Here's the description\"",
      "orange 'Round and orange'"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name__regex=.",
        "data": {},
        "status": 200,
        "response": {
          "count": 2,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [],
              "description": "Here's the description",
              "name": "apple"
            },
            {
              "roles": [],
              "description": "Round and orange",
              "name": "orange"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy list_atoms ppl",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy list_atoms ppl",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "apple \"Here's the description\""
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name__regex=.%2Appl.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [],
              "description": "Here's the description",
              "name": "apple"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy role_create fruit \"5 a day\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy role_create fruit \"5 a day\"",
    "ok": [
      "Created new role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/fruit",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostpolicy/roles/",
        "data": {
          "name": "fruit",
          "description": "5 a day"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/fruit",
        "data": {},
        "status": 200,
        "response": {
          "hosts": [],
          "atoms": [],
          "description": "5 a day",
          "name": "fruit",
          "labels": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy list_roles *",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy list_roles *",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name Description Labels ",
      "fruit 5 a day "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name__regex=.",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy list_roles fru",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy list_roles fru",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name Description Labels ",
      "fruit 5 a day "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name__regex=.%2Afru.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy add_atom fruit apple",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy add_atom fruit apple",
    "ok": [
      "OK: : Added atom 'apple' to role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=apple",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [],
              "description": "Here's the description",
              "name": "apple"
            }
          ]
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostpolicy/roles/fruit/atoms/",
        "data": {
          "name": "apple"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "policy add_atom fruit orange",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy add_atom fruit orange",
    "ok": [
      "OK: : Added atom 'orange' to role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "apple"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=orange",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [],
              "description": "Round and orange",
              "name": "orange"
            }
          ]
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostpolicy/roles/fruit/atoms/",
        "data": {
          "name": "orange"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "policy info orange",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy info orange",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: orange",
      "Created: <TIME>",
      "Description: Round and orange",
      "Roles where this atom is a member:",
      " fruit"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=orange",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [
                {
                  "name": "fruit"
                }
              ],
              "description": "Round and orange",
              "name": "orange"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy info fruit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy info fruit",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: fruit",
      "Created: <TIME>",
      "Description: 5 a day",
      "Atom members:",
      " apple",
      " orange",
      "Labels:",
      " None"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "apple"
                },
                {
                  "name": "orange"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy list_members fruit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy list_members fruit",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name:",
      " apple",
      " orange"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "apple"
                },
                {
                  "name": "orange"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy atom_history apple",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy atom_history apple",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<TIME> [test]: HostPolicyAtom create: description = 'Here's the description', name = 'apple'",
      "<TIME> [test]: HostPolicyAtom add to: hostpolicy_role fruit"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=hostpolicy_atom&name=apple",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_atom",
              "name": "apple",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "create",
              "data": "{\"description\": \"Here's the description\", \"name\": \"apple\"}"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=hostpolicy_atom&model_id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_atom",
              "name": "apple",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "create",
              "data": "{\"description\": \"Here's the description\", \"name\": \"apple\"}"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?data__relation=atoms&data__id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "add",
              "data": {
                "name": "apple",
                "relation": "atoms"
              }
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy atom_delete apple",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy atom_delete apple # Should fail because 'apple' is used in role 'fruit'",
    "ok": [],
    "warning": [],
    "error": [
      "ERROR: : Atom apple used in roles: fruit"
    ],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=apple",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [
                {
                  "name": "fruit"
                }
              ],
              "description": "Here's the description",
              "name": "apple"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?atoms__name__exact=apple",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "apple"
                },
                {
                  "name": "orange"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy remove_atom fruit apple",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy remove_atom fruit apple",
    "ok": [
      "OK: : Removed atom 'apple' from role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "apple"
                },
                {
                  "name": "orange"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostpolicy/roles/fruit/atoms/apple",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy atom_history apple",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy atom_history apple",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<TIME> [test]: HostPolicyAtom create: description = 'Here's the description', name = 'apple'",
      "<TIME> [test]: HostPolicyAtom add to: hostpolicy_role fruit",
      "<TIME> [test]: HostPolicyAtom remove from: hostpolicy_role fruit"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=hostpolicy_atom&name=apple",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_atom",
              "name": "apple",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "create",
              "data": "{\"description\": \"Here's the description\", \"name\": \"apple\"}"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=hostpolicy_atom&model_id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_atom",
              "name": "apple",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "create",
              "data": "{\"description\": \"Here's the description\", \"name\": \"apple\"}"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?data__relation=atoms&data__id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 2,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "add",
              "data": {
                "name": "apple",
                "relation": "atoms"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "remove",
              "data": {
                "name": "apple",
                "relation": "atoms"
              }
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy atom_delete apple",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy atom_delete apple",
    "ok": [
      "OK: : Deleted atom apple"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=apple",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [],
              "description": "Here's the description",
              "name": "apple"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?atoms__name__exact=apple",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostpolicy/atoms/apple",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy set_description orange \"Juicy\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy set_description orange \"Juicy\"",
    "ok": [
      "OK: : updated description to 'Juicy' for 'orange'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=orange",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [
                {
                  "name": "fruit"
                }
              ],
              "description": "Round and orange",
              "name": "orange"
            }
          ]
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hostpolicy/atoms/orange",
        "data": {
          "description": "Juicy"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy rename orange tangerine",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy rename orange tangerine",
    "ok": [
      "OK: : Renamed 'orange' to 'tangerine'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=orange",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [
                {
                  "name": "fruit"
                }
              ],
              "description": "Juicy",
              "name": "orange"
            }
          ]
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hostpolicy/atoms/orange",
        "data": {
          "name": "tangerine"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo",
    "ok": [
      "OK: : created host foo.example.org"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": null,
          "comment": null
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host info foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host info foo",
    "ok": [
      "OK: : printed host info for foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: foo.example.org",
      "Contact: ",
      "TTL: (Default)",
      "TXT: v=spf1 -all"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 12
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy host_add tangerine foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy host_add tangerine foo # should fail, tangerine is an atom, not a role",
    "ok": [],
    "warning": [
      "WARNING: : Role 'tangerine' does not exist"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=tangerine",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy host_add fruit foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy host_add fruit foo",
    "ok": [
      "OK: : Added host 'foo.example.org' to role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "tangerine"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 12
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostpolicy/roles/fruit/hosts/",
        "data": {
          "name": "foo.example.org"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "policy list_hosts fruit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy list_hosts fruit",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name:",
      " foo.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [
                {
                  "name": "foo.example.org"
                }
              ],
              "atoms": [
                {
                  "name": "tangerine"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy host_list foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy host_list foo",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Roles for 'foo.example.org':",
      " fruit"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 12
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [
                {
                  "name": "foo.example.org"
                }
              ],
              "atoms": [
                {
                  "name": "tangerine"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host info foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host info foo",
    "ok": [
      "OK: : printed host info for foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: foo.example.org",
      "Contact: ",
      "TTL: (Default)",
      "TXT: v=spf1 -all",
      "Policies: fruit"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 12
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [
                {
                  "name": "foo.example.org"
                }
              ],
              "atoms": [
                {
                  "name": "tangerine"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy host_remove fruit foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy host_remove fruit foo",
    "ok": [
      "OK: : Removed host 'foo.example.org' from role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [
                {
                  "name": "foo.example.org"
                }
              ],
              "atoms": [
                {
                  "name": "tangerine"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 12
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostpolicy/roles/fruit/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy remove_atom fruit banana",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy remove_atom fruit banana # should fail",
    "ok": [],
    "warning": [
      "WARNING: : Atom 'banana' not a member of 'fruit'"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "tangerine"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy remove_atom fruit tangerine",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy remove_atom fruit tangerine",
    "ok": [
      "OK: : Removed atom 'tangerine' from role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [
                {
                  "name": "tangerine"
                }
              ],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostpolicy/roles/fruit/atoms/tangerine",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy role_delete vegetables",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy role_delete vegetables # fails, that role doesn't exist",
    "ok": [],
    "warning": [
      "WARNING: : Role 'vegetables' does not exist"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=vegetables",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy role_history fruit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy role_history fruit",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "<TIME> [test]: HostPolicyRole create: description = '5 a day', name = 'fruit', labels = '[]'",
      "<TIME> [test]: HostPolicyAtom add: apple",
      "<TIME> [test]: HostPolicyAtom add: orange",
      "<TIME> [test]: HostPolicyAtom remove: apple",
      "<TIME> [test]: Host add: foo.example.org",
      "<TIME> [test]: Host remove: foo.example.org",
      "<TIME> [test]: HostPolicyAtom remove: tangerine"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=hostpolicy_role&name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 7,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyRole",
              "action": "create",
              "data": "{\"description\": \"5 a day\", \"name\": \"fruit\", \"labels\": []}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "add",
              "data": {
                "name": "apple",
                "relation": "atoms"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "add",
              "data": {
                "name": "orange",
                "relation": "atoms"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "remove",
              "data": {
                "name": "apple",
                "relation": "atoms"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "foo.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "Host",
              "action": "remove",
              "data": {
                "name": "foo.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "remove",
              "data": {
                "name": "tangerine",
                "relation": "atoms"
              }
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?resource=hostpolicy_role&model_id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 7,
          "next": null,
          "previous": null,
          "results": [
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyRole",
              "action": "create",
              "data": "{\"description\": \"5 a day\", \"name\": \"fruit\", \"labels\": []}"
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "add",
              "data": {
                "name": "apple",
                "relation": "atoms"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "add",
              "data": {
                "name": "orange",
                "relation": "atoms"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "remove",
              "data": {
                "name": "apple",
                "relation": "atoms"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "Host",
              "action": "add",
              "data": {
                "name": "foo.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "Host",
              "action": "remove",
              "data": {
                "name": "foo.example.org",
                "relation": "hosts"
              }
            },
            {
              "timestamp": "<TIME>",
              "user": "test",
              "resource": "hostpolicy_role",
              "name": "fruit",
              "model_id": 1,
              "model": "HostPolicyAtom",
              "action": "remove",
              "data": {
                "name": "tangerine",
                "relation": "atoms"
              }
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/history/?data__relation=roles&data__id__in=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy role_delete fruit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy role_delete fruit",
    "ok": [
      "OK: : Deleted role 'fruit'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=fruit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "5 a day",
              "name": "fruit",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostpolicy/roles/fruit",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy atom_delete tangerine",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy atom_delete tangerine",
    "ok": [
      "OK: : Deleted atom tangerine"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=tangerine",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "roles": [],
              "description": "Juicy",
              "name": "tangerine"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?atoms__name__exact=tangerine",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostpolicy/atoms/tangerine",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo",
    "ok": [
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 12
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "permission network_add <IPv4>/24 somegroup \"[abc]+.uio.no\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_add <IPv4>/24 somegroup \"[abc]+.uio.no\"",
    "ok": [
      "OK: : Added permission to <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "POST",
        "url": "/api/v1/permissions/netgroupregex/",
        "data": {
          "range": "<IPv4>/24",
          "group": "somegroup",
          "regex": "[abc]+.uio.no"
        },
        "status": 201,
        "response": {
          "group": "somegroup",
          "range": "<IPv4>/24",
          "regex": "[abc]+.uio.no",
          "labels": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "permission network_list",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_list",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Range Group Regex Labels ",
      "<IPv4>/24 somegroup [abc]+.uio.no "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?ordering=range%2Cgroup",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "somegroup",
              "range": "<IPv4>/24",
              "regex": "[abc]+.uio.no",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "permission network_remove <IPv4>/24 othergroup \"[abc]*.uio.no\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_remove <IPv4>/24 othergroup \"[abc]*.uio.no\" # fails, no match",
    "ok": [],
    "warning": [
      "WARNING: : No matching permission found"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?group=othergroup&range=<IPv4>%2F24&regex=%5Babc%5D%2A.uio.no",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "permission network_remove <IPv4>/24 somegroup \"[abc]+.uio.no\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_remove <IPv4>/24 somegroup \"[abc]+.uio.no\"",
    "ok": [
      "OK: : Removed permission for <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?group=somegroup&range=<IPv4>%2F24&regex=%5Babc%5D%2B.uio.no",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "somegroup",
              "range": "<IPv4>/24",
              "regex": "[abc]+.uio.no",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/permissions/netgroupregex/1",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv4>/24 -desc foo -vlan 1234",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv4>/24 -desc foo -vlan 1234",
    "ok": [
      "OK: : created network <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv4>/24",
          "description": "foo",
          "vlan": "1234",
          "category": null,
          "location": null,
          "frozen": false
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host add foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo",
    "ok": [
      "OK: : created host foo.example.org"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": null,
          "comment": null
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host a_add foo <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add foo <IPv4>",
    "ok": [
      "OK: : added ip <IPv4> to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "foo",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 13,
          "ipaddress": "<IPv4>"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv4>",
          "host": 13
        }
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc <IPv4> <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc <IPv4> <IPv6> # doesn't work, because ip addr doesn't exist",
    "ok": [],
    "warning": [
      "WARNING: : ip <IPv4> doesn't exist."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc <IPv4> <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc <IPv4> <IPv6>",
    "ok": [
      "OK: : associated mac address <IPv6> with ip <IPv4>"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?macaddress=aa%3Abb%3Acc%3Add%3Aee%3Aff&ordering=ipaddress",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/6",
        "data": {
          "macaddress": "<IPv6>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "dhcp disassoc <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp disassoc <IPv4> # ip addr dosnt exst",
    "ok": [],
    "warning": [
      "WARNING: : ip <IPv4> doesn't exist."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "dhcp disassoc <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp disassoc <IPv4>",
    "ok": [
      "OK: : disassociated mac address <IPv6> from ip <IPv4>"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ]
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/6",
        "data": {
          "macaddress": ""
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc meh <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc meh <IPv6> # host not found",
    "ok": [],
    "warning": [
      "WARNING: : host not found: 'meh.example.org'"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/meh.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?cnames__name=meh.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc foo <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc foo <IPv6>",
    "ok": [
      "OK: : associated mac address <IPv6> with ip <IPv4>"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?macaddress=aa%3Abb%3Acc%3Add%3Aee%3Aff&ordering=ipaddress",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/6",
        "data": {
          "macaddress": "<IPv6>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "dhcp disassoc foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp disassoc foo",
    "ok": [
      "OK: : disassociated mac address <IPv6> from ip <IPv4>"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/6",
        "data": {
          "macaddress": ""
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "dhcp disassoc meh",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp disassoc meh # host not found",
    "ok": [],
    "warning": [
      "WARNING: : host not found: 'meh.example.org'"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/meh.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?cnames__name=meh.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_remove foo <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_remove foo <IPv4>",
    "ok": [
      "OK: : removed ip <IPv4> from foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/ipaddresses/6",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc foo <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc foo <IPv6> # doesn't work, because the host doesn't have any ip addresses",
    "ok": [],
    "warning": [
      "WARNING: : foo doesn't have any ip addresses."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_add foo <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add foo <IPv4>",
    "ok": [
      "OK: : added ip <IPv4> to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "foo",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 13,
          "ipaddress": "<IPv4>"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv4>",
          "host": 13
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_add foo <IPv4> -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add foo <IPv4> -f",
    "ok": [
      "OK: : added ip <IPv4> to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "foo",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 13,
          "ipaddress": "<IPv4>"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv4>",
          "host": 13
        }
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc foo <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc foo <IPv6> # should fail, two IPs of same type",
    "ok": [],
    "warning": [
      "WARNING: : foo has multiple addresses in the same address family. Please specify a specific address to use instead."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_remove foo <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_remove foo <IPv4>",
    "ok": [
      "OK: : removed ip <IPv4> from foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/ipaddresses/8",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv6>::/64 -desc \"foo_ipv6\" -vlan 1234",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv6>::/64 -desc \"foo_ipv6\" -vlan 1234",
    "ok": [
      "OK: : created network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [],
              "network": "<IPv4>/24",
              "description": "foo",
              "vlan": 1234,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": false,
              "reserved": 3
            }
          ]
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv6>::/64",
          "description": "foo_ipv6",
          "vlan": "1234",
          "category": null,
          "location": null,
          "frozen": false
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv6>::/64 -desc \"notfoo_ipv6\" -vlan 1235",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv6>::/64 -desc \"notfoo_ipv6\" -vlan 1235",
    "ok": [
      "OK: : created network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 2,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [],
              "network": "<IPv4>/24",
              "description": "foo",
              "vlan": 1234,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": false,
              "reserved": 3
            },
            {
              "excluded_ranges": [],
              "network": "<IPv6>::/64",
              "description": "foo_ipv6",
              "vlan": 1234,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": false,
              "reserved": 3
            }
          ]
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv6>::/64",
          "description": "notfoo_ipv6",
          "vlan": "1235",
          "category": null,
          "location": null,
          "frozen": false
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_add foo <IPv6> -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_add foo <IPv6> -f",
    "ok": [
      "OK: : added ip <IPv6> to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=2001%3Adb9%3A%3A5",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb9%3A%3A5",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "notfoo_ipv6",
          "vlan": 1235,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb9%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 13,
          "ipaddress": "<IPv6>"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv6>",
          "host": 13
        }
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc foo <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc foo <IPv6> # should fail, the host has two IPs of different types on different VLANs.",
    "ok": [],
    "warning": [
      "WARNING: : foo.example.org has one IPv4 and one IPv6 address, but they are on different VLANs. Please specify a specific address to use instead."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "foo",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb9%3A%3A5",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "notfoo_ipv6",
          "vlan": 1235,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_remove foo <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_remove foo <IPv6>",
    "ok": [
      "OK: : removed ip <IPv6> from foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/ipaddresses/9",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_add foo <IPv6> -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_add foo <IPv6> -f",
    "ok": [
      "OK: : added ip <IPv6> to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=2001%3Adb8%3A%3A5",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A5",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "foo_ipv6",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 13,
          "ipaddress": "<IPv6>"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv6>",
          "host": 13
        }
      }
    ],
    "time": null
  },
  {
    "command": "dhcp assoc foo <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "dhcp assoc foo <IPv6> # should work, the host now has two IPs of different types on the same VLAN.",
    "ok": [
      "OK: : associated mac address <IPv6> with ip <IPv4>"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 13
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "foo",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A5",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "foo_ipv6",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?macaddress=aa%3Abb%3Acc%3Add%3Aee%3Aff&ordering=ipaddress",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/7",
        "data": {
          "macaddress": "<IPv6>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo -f",
    "ok": [
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 13
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 13
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 13
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "foo",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A5",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "foo_ipv6",
          "vlan": 1234,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=13",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv4>/24 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv4>/24 -f",
    "ok": [
      "OK: : removed network <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/used_list",
        "data": {},
        "status": 200,
        "response": []
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv6>::/64 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv6>::/64 -f",
    "ok": [
      "OK: : removed network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/used_list",
        "data": {},
        "status": 200,
        "response": []
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv6>::/64 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv6>::/64 -f",
    "ok": [
      "OK: : removed network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb9%3A%3A/64/used_list",
        "data": {},
        "status": 200,
        "response": []
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/2001%3Adb9%3A%3A/64",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv4>/24 -desc \"lorem ipsum\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv4>/24 -desc \"lorem ipsum\"",
    "ok": [
      "OK: : created network <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "category": null,
          "location": null,
          "frozen": false
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "network create -network <IPv6>::/64 -desc \"dolor sit amet\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network create -network <IPv6>::/64 -desc \"dolor sit amet\"",
    "ok": [
      "OK: : created network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "excluded_ranges": [],
              "network": "<IPv4>/24",
              "description": "lorem ipsum",
              "vlan": null,
              "dns_delegated": false,
              "category": "",
              "location": "",
              "frozen": false,
              "reserved": 3
            }
          ]
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/networks/",
        "data": {
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "category": null,
          "location": null,
          "frozen": false
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host add foo -ip <IPv4> -contact hi@ho.com -comment \"meh\" -macaddress <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo -ip <IPv4> -contact hi@ho.com -comment \"meh\" -macaddress <IPv6>",
    "ok": [
      "OK: : created host foo.example.org with IP <IPv4>"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": "hi@ho.com",
          "comment": "meh",
          "ipaddress": "<IPv4>"
        },
        "status": 201
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "hi@ho.com",
          "ttl": null,
          "comment": "meh",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/ipaddresses/?macaddress=11%3A22%3A33%3Aaa%3Abb%3Acc&ordering=ipaddress",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/11",
        "data": {
          "macaddress": "<IPv6>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host info foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host info foo",
    "ok": [
      "OK: : printed host info for foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Name: foo.example.org",
      "Contact: hi@ho.com",
      "Comment: meh",
      "A_Records IP MAC",
      " <IPv4> <IPv6>",
      "TTL: (Default)",
      "TXT: v=spf1 -all"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "hi@ho.com",
          "ttl": null,
          "comment": "meh",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?hosts__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host find -name *oo*",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host find -name *oo*",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name Contact Comment",
      "foo.example.org hi@ho.com meh"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&page_size=1&name__regex=.%2Aoo.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&name__regex=.%2Aoo.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host find -contact hi*",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host find -contact hi*",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name Contact Comment",
      "foo.example.org hi@ho.com meh"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&page_size=1&contact__regex=%5Ehi",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&contact__regex=%5Ehi",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host find -comment meh",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host find -comment meh",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name Contact Comment",
      "foo.example.org hi@ho.com meh"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&page_size=1&comment__regex=.%2Ameh.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&comment__regex=.%2Ameh.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host find -name f* -contact h* -comment m*",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host find -name f* -contact h* -comment m*",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name Contact Comment",
      "foo.example.org hi@ho.com meh"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&page_size=1&contact__regex=%5Eh&comment__regex=%5Em&name__regex=%5Ef",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ordering=name&contact__regex=%5Eh&comment__regex=%5Em&name__regex=%5Ef",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host rename foo bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host rename foo bar",
    "ok": [
      "OK: : renamed foo.example.org to bar.example.org"
    ],
    "warning": [
      "WARNING: : host not found: bar.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 14
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 14
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "foo.example.org",
              "contact": "hi@ho.com",
              "ttl": null,
              "comment": "meh",
              "zone": 1
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {
          "name": "bar.example.org"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host set_comment bar 'This is the comment'",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host set_comment bar 'This is the comment'",
    "ok": [
      "OK: : Updated comment of bar.example.org to \"This is the comment\""
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "hi@ho.com",
          "ttl": null,
          "comment": "meh",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {
          "comment": "This is the comment"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host set_contact bar \"I'm the contact\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host set_contact bar \"I'm the contact\" # fails because invalid email address",
    "ok": [],
    "warning": [
      "WARNING: : invalid mail address I'm the contact (target host: bar)"
    ],
    "error": [],
    "output": [],
    "api_requests": [],
    "time": null
  },
  {
    "command": "host set_contact bar me@example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host set_contact bar me@example.org",
    "ok": [
      "OK: : Updated contact of bar.example.org to me@example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "hi@ho.com",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {
          "contact": "me@example.org"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host a_add bar <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add bar <IPv4> # must force",
    "ok": [],
    "warning": [
      "WARNING: : bar.example.org already has A/AAAA record(s), must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_add bar <IPv4> -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add bar <IPv4> -f",
    "ok": [
      "OK: : added ip <IPv4> to bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 14,
          "ipaddress": "<IPv4>"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv4>",
          "host": 14
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_add bar <IPv4> -macaddress <IPv6> -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_add bar <IPv4> -macaddress <IPv6> -force",
    "ok": [
      "OK: : added ip <IPv4> to bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 14,
          "ipaddress": "<IPv4>",
          "macaddress": "<IPv6>"
        },
        "status": 201,
        "response": {
          "macaddress": "<IPv6>",
          "ipaddress": "<IPv4>",
          "host": 14
        }
      }
    ],
    "time": null
  },
  {
    "command": "host a_change -old <IPv4> -new <IPv4> bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_change -old <IPv4> -new <IPv4> bar",
    "ok": [
      "OK: : changed ip <IPv4> to <IPv4> for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/12",
        "data": {
          "ipaddress": "<IPv4>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host a_change -old <IPv4> -new <IPv4> bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_change -old <IPv4> -new <IPv4> bar # has mac addr, should keep it assigned to the new ip",
    "ok": [
      "OK: : changed ip <IPv4> to <IPv4> for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/13",
        "data": {
          "ipaddress": "<IPv4>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host a_remove bar <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_remove bar <IPv4>",
    "ok": [],
    "warning": [
      "WARNING: : <IPv4> is not owned by bar.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add baz",
    "ok": [
      "OK: : created host baz.example.org"
    ],
    "warning": [
      "WARNING: : host not found: baz.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "baz.example.org",
          "contact": null,
          "comment": null
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host a_move -ip <IPv4> -fromhost bar -tohost baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_move -ip <IPv4> -fromhost bar -tohost baz",
    "ok": [
      "OK: : Moved ipaddress <IPv4>"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/11",
        "data": {
          "host": 15
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host a_show baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_show baz",
    "ok": [
      "OK: : showed ip addresses for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "A_Records IP MAC",
      " <IPv4> <IPv6>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_add bar <IPv6>::/64",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_add bar <IPv6>::/64 # must force",
    "ok": [],
    "warning": [
      "WARNING: : bar.example.org already has A/AAAA record(s), must force"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/first_unused",
        "data": {},
        "status": 200,
        "response": "<IPv6>"
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_add bar <IPv6> -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_add bar <IPv6> -f",
    "ok": [
      "OK: : added ip <IPv6> to bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=2001%3Adb8%3A%3A11",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A11",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 14,
          "ipaddress": "<IPv6>"
        },
        "status": 201,
        "response": {
          "macaddress": "",
          "ipaddress": "<IPv6>",
          "host": 14
        }
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_add bar <IPv6> -macaddress <IPv6> -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_add bar <IPv6> -macaddress <IPv6> -f",
    "ok": [
      "OK: : added ip <IPv6> to bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=2001%3Adb8%3A%3A12",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A12",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/ipaddresses/",
        "data": {
          "host": 14,
          "ipaddress": "<IPv6>",
          "macaddress": "<IPv6>"
        },
        "status": 201,
        "response": {
          "macaddress": "<IPv6>",
          "ipaddress": "<IPv6>",
          "host": 14
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove bar # should fail, because it has multiple addresses, must force",
    "ok": [],
    "warning": [
      "WARNING: : bar.example.org requires force and override for deletion:\n multiple ipaddresses on the same VLAN. Must use 'force'."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A11",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A12",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_show bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_show bar",
    "ok": [
      "OK: : showed aaaa records for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "A_Records IP MAC",
      " <IPv4> <not set>",
      " <IPv4> <IPv6>",
      "AAAA_Records IP MAC",
      " <IPv6> <not set>",
      " <IPv6> <IPv6>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_change -old <IPv6> -new <IPv6> bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_change -old <IPv6> -new <IPv6> bar",
    "ok": [
      "OK: : changed ip <IPv6> to <IPv6> for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=2001%3Adb8%3A%3A13",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A13",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/14",
        "data": {
          "ipaddress": "<IPv6>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_change -old <IPv6> -new <IPv6> bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_change -old <IPv6> -new <IPv6> bar # has mac addr, should keep it assigned to the new ip",
    "ok": [
      "OK: : changed ip <IPv6> to <IPv6> for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=2001%3Adb8%3A%3A14",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A14",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv6>::",
          "<IPv6>",
          "<IPv6>",
          "<IPv6>"
        ]
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/15",
        "data": {
          "ipaddress": "<IPv6>"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_remove bar <IPv6>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_remove bar <IPv6>",
    "ok": [
      "OK: : removed ip <IPv6> from bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "",
              "ipaddress": "<IPv6>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/ipaddresses/14",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host aaaa_move -ip <IPv6> -fromhost bar -tohost baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host aaaa_move -ip <IPv6> -fromhost bar -tohost baz",
    "ok": [
      "OK: : Moved ipaddress <IPv6>"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ipaddresses/15",
        "data": {
          "host": 15
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host a_show baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host a_show baz",
    "ok": [
      "OK: : showed ip addresses for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "A_Records IP MAC",
      " <IPv4> <IPv6>",
      "AAAA_Records IP MAC",
      " <IPv6> <IPv6>"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host cname_add bar fubar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host cname_add bar fubar",
    "ok": [
      "OK: : Added cname alias fubar.example.org for bar.example.org"
    ],
    "warning": [
      "WARNING: : host not found: 'fubar.example.org'"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/fubar.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?cnames__name=fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/cnames/",
        "data": {
          "host": 14,
          "name": "fubar.example.org"
        },
        "status": 201,
        "response": {
          "name": "fubar.example.org",
          "ttl": null,
          "zone": 1,
          "host": 14
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove bar # should fail, because it has a cname record, must force and override with 'cname'",
    "ok": [],
    "warning": [
      "WARNING: : bar.example.org requires force and override for deletion:\n 1 cnames, override with 'cname'\n - fubar.example.org\n multiple ipaddresses on the same VLAN. Must use 'force'."
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [
            {
              "name": "fubar.example.org",
              "ttl": null,
              "zone": 1,
              "host": 14
            }
          ],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host cname_show bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host cname_show bar",
    "ok": [
      "OK: : showed cname aliases for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Cname: fubar.example.org -> bar.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [
            {
              "name": "fubar.example.org",
              "ttl": null,
              "zone": 1,
              "host": 14
            }
          ],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host cname_remove bar fubar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host cname_remove bar fubar",
    "ok": [
      "OK: : Removed cname alias fubar.example.org for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [
            {
              "name": "fubar.example.org",
              "ttl": null,
              "zone": 1,
              "host": 14
            }
          ],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/cnames/fubar.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host hinfo_add baz x86 Win",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host hinfo_add baz x86 Win",
    "ok": [
      "OK: : Added HINFO record to baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hinfos/",
        "data": {
          "host": 15,
          "cpu": "x86",
          "os": "Win"
        },
        "status": 201,
        "response": {
          "host": 15,
          "cpu": "x86",
          "os": "Win"
        }
      }
    ],
    "time": null
  },
  {
    "command": "host hinfo_show baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host hinfo_show baz",
    "ok": [
      "OK: : showed hinfo for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Hinfo: cpu=x86 os=Win"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": {
            "host": 15,
            "cpu": "x86",
            "os": "Win"
          },
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host hinfo_remove baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host hinfo_remove baz",
    "ok": [
      "OK: : deleted HINFO from baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": {
            "host": 15,
            "cpu": "x86",
            "os": "Win"
          },
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hinfos/15",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host loc_add baz \"52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host loc_add baz \"52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m\"",
    "ok": [
      "OK: : added LOC '52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m' for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/locs/",
        "data": {
          "host": 15,
          "loc": "52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m"
        },
        "status": 201,
        "response": {
          "host": 15,
          "loc": "52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m"
        }
      }
    ],
    "time": null
  },
  {
    "command": "host loc_show baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host loc_show baz",
    "ok": [
      "OK: : showed LOC for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "Loc: 52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": {
            "host": 15,
            "loc": "52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m"
          },
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host loc_remove baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host loc_remove baz",
    "ok": [
      "OK: : removed LOC for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": {
            "host": 15,
            "loc": "52 22 23.000 N 4 53 32.000 E -2.00m 0.00m 10000m 10m"
          },
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/locs/15",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host mx_add baz 10 mail.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host mx_add baz 10 mail.example.org",
    "ok": [
      "OK: : Added MX record to baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/mxs/",
        "data": {
          "host": 15,
          "priority": 10,
          "mx": "mail.example.org"
        },
        "status": 201,
        "response": {
          "priority": 10,
          "mx": "mail.example.org",
          "host": 15
        }
      }
    ],
    "time": null
  },
  {
    "command": "host mx_show baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host mx_show baz",
    "ok": [
      "OK: : showed MX records for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "MX: Priority Server",
      " 10 mail.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 15
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/mxs/?host=15",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 15
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove baz # Should fail, because it has an MX record, must force and override with 'mx'",
    "ok": [],
    "warning": [
      "WARNING: : baz.example.org requires force and override for deletion:\n multiple ipaddresses on the same VLAN. Must use 'force'.\n 1 MX records, override with 'mx'\n - mail.example.org (priority: 10)"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 15
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A14",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=15",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host mx_remove baz 10 mail.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host mx_remove baz 10 mail.example.org",
    "ok": [
      "OK: : deleted MX from baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 15
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/mxs/1",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host naptr_add -name baz -preference 16384 -order 3 -flag u -service \"SIP\" -regex \"[abc]+\" -replacement \"wonk\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host naptr_add -name baz -preference 16384 -order 3 -flag u -service \"SIP\" -regex \"[abc]+\" -replacement \"wonk\"",
    "ok": [
      "OK: : created NAPTR record for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/naptrs/",
        "data": {
          "preference": 16384,
          "order": 3,
          "flag": "u",
          "service": "SIP",
          "regex": "[abc]+",
          "replacement": "wonk",
          "host": 15
        },
        "status": 201,
        "response": {
          "preference": 16384,
          "order": 3,
          "flag": "u",
          "service": "SIP",
          "regex": "[abc]+",
          "replacement": "wonk",
          "host": 15
        }
      }
    ],
    "time": null
  },
  {
    "command": "host naptr_show baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host naptr_show baz",
    "ok": [
      "OK: : showed 1 NAPTR records for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "NAPTRs: Preference Order Flag Service Regex Replacement ",
      " 16384 3 u sip [abc]+ wonk "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=15",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "preference": 16384,
              "order": 3,
              "flag": "u",
              "service": "sip",
              "regex": "[abc]+",
              "replacement": "wonk",
              "host": 15
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host naptr_remove -name baz -preference 16384 -order 3 -flag u -service \"sip\" -regex \"[abc]+\" -replacement \"wonk\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host naptr_remove -name baz -preference 16384 -order 3 -flag u -service \"sip\" -regex \"[abc]+\" -replacement \"wonk\"",
    "ok": [
      "OK: : deleted NAPTR record for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?replacement__contains=wonk&host=15",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "preference": 16384,
              "order": 3,
              "flag": "u",
              "service": "sip",
              "regex": "[abc]+",
              "replacement": "wonk",
              "host": 15
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/naptrs/1",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host ptr_add <IPv4> baz.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ptr_add <IPv4> baz.example.org",
    "ok": [
      "OK: : Added PTR record <IPv4> to baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/ptroverrides/?ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/ptroverrides/",
        "data": {
          "host": 15,
          "ipaddress": "<IPv4>"
        },
        "status": 201,
        "response": {
          "ipaddress": "<IPv4>",
          "host": 15
        }
      }
    ],
    "time": null
  },
  {
    "command": "host ptr_show <IPv4>",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ptr_show <IPv4>",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "PTR override:<IPv4> -> baz.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ptr_overrides__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 15
                },
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv6>",
                  "host": 15
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 15
                }
              ],
              "ptr_overrides": [
                {
                  "ipaddress": "<IPv4>",
                  "host": 15
                }
              ],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "baz.example.org",
              "contact": "",
              "ttl": null,
              "comment": "",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host add clover",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add clover",
    "ok": [
      "OK: : created host clover.example.org"
    ],
    "warning": [
      "WARNING: : host not found: clover.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=clover.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/clover.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=clover.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "clover.example.org",
          "contact": null,
          "comment": null
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host ptr_change -ip <IPv4> -old baz -new clover",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ptr_change -ip <IPv4> -old baz -new clover",
    "ok": [
      "OK: : changed owner of PTR record <IPv4> from baz.example.org to clover.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 15
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/clover.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 16
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "clover.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/ptroverrides/1",
        "data": {
          "host": 16
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host ptr_remove <IPv4> clover",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ptr_remove <IPv4> clover",
    "ok": [
      "OK: : deleted PTR record <IPv4> for clover.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/clover.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 16
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 16
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "clover.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/ptroverrides/1",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [],
    "time": null
  },
  {
    "command": "host srv_add -name \"whatever\" -priority 1 -weight 1 -port 80 -host baz",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host srv_add -name \"whatever\" -priority 1 -weight 1 -port 80 -host baz # doesn't work",
    "ok": [],
    "warning": [
      "WARNING: : POST \"http://<IPv4>:8000/api/v1/srvs/\": 400: Bad Request\n{\n \"name\": [\n \"Must match: ^_[a-z0-9]+(([a-z0-9][_-]?)+[a-z0-9]+)?._(tcp|tls|udp)\\\\.\"\n ]\n}"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/whatever.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/srvs/",
        "data": {
          "name": "whatever.example.org",
          "priority": "1",
          "weight": "1",
          "port": "80",
          "host": 15,
          "ttl": null
        },
        "status": 400,
        "response": {
          "name": [
            "Must match: ^_[a-z0-9]+(([a-z0-9][_-]?)+[a-z0-9]+)?._(tcp|tls|udp)\\."
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host srv_add -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host baz.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host srv_add -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host baz.example.org",
    "ok": [
      "OK: : Added SRV record _sip._tcp.example.org with target baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/_sip._tcp.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/srvs/",
        "data": {
          "name": "_sip._tcp.example.org",
          "priority": "10",
          "weight": "5",
          "port": "3456",
          "host": 15,
          "ttl": null
        },
        "status": 201,
        "response": {
          "name": "_sip._tcp.example.org",
          "priority": 10,
          "weight": 5,
          "port": 3456,
          "ttl": null,
          "zone": 1,
          "host": 15
        }
      }
    ],
    "time": null
  },
  {
    "command": "host srv_show \"_sip._tcp.example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host srv_show \"_sip._tcp.example.org\"",
    "ok": [
      "OK: : showed entries for SRV _sip._tcp.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "SRV: _sip._tcp.example.org 10 5 3456 baz.example.org"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/srvs/?name=_sip._tcp.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "_sip._tcp.example.org",
              "priority": 10,
              "weight": 5,
              "port": 3456,
              "ttl": null,
              "zone": 1,
              "host": 15
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?id__in=15",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ipaddresses": [
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv4>",
                  "host": 15
                },
                {
                  "macaddress": "<IPv6>",
                  "ipaddress": "<IPv6>",
                  "host": 15
                }
              ],
              "cnames": [],
              "mxs": [],
              "txts": [
                {
                  "txt": "v=spf1 -all",
                  "host": 15
                }
              ],
              "ptr_overrides": [],
              "hinfo": null,
              "loc": null,
              "bacnetid": null,
              "name": "baz.example.org",
              "contact": "",
              "ttl": null,
              "comment": "",
              "zone": 1
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host srv_remove -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host baz.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host srv_remove -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host baz.example.org",
    "ok": [
      "OK: : deleted SRV record for baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?name=_sip._tcp.example.org&host=15",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "_sip._tcp.example.org",
              "priority": 10,
              "weight": 5,
              "port": 3456,
              "ttl": null,
              "zone": 1,
              "host": 15
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/srvs/1",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host sshfp_add bar 1 1 12345678abcde",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host sshfp_add bar 1 1 12345678abcde",
    "ok": [
      "OK: : Added SSHFP record 12345678abcde for host bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/sshfps/",
        "data": {
          "algorithm": "1",
          "hash_type": "1",
          "fingerprint": "12345678abcde",
          "host": 14
        },
        "status": 201,
        "response": {
          "ttl": null,
          "algorithm": 1,
          "hash_type": 1,
          "fingerprint": "12345678abcde",
          "host": 14
        }
      }
    ],
    "time": null
  },
  {
    "command": "host sshfp_show bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host sshfp_show bar",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "SSHFPs: Algorithm Type Fingerprint ",
      " 1 1 12345678abcde "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ttl": null,
              "algorithm": 1,
              "hash_type": 1,
              "fingerprint": "12345678abcde",
              "host": 14
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host sshfp_remove -fingerprint 394875985 bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host sshfp_remove -fingerprint 394875985 bar # not found",
    "ok": [
      "OK: : found no SSHFP record with fingerprint 394875985 for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ttl": null,
              "algorithm": 1,
              "hash_type": 1,
              "fingerprint": "12345678abcde",
              "host": 14
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host sshfp_remove bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host sshfp_remove bar",
    "ok": [
      "OK: : removed SSHFP record with fingerprint 12345678abcde for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/sshfps/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "ttl": null,
              "algorithm": 1,
              "hash_type": 1,
              "fingerprint": "12345678abcde",
              "host": 14
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/sshfps/1",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host ttl_set bar 3600",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ttl_set bar 3600",
    "ok": [
      "OK: : updated TTL to 3600 for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {
          "ttl": "3600"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host ttl_show bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ttl_show bar",
    "ok": [
      "OK: : showed TTL for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "TTL: 3600"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": 3600,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": 3600,
          "comment": "This is the comment",
          "zone": 1
        }
      }
    ],
    "time": null
  },
  {
    "command": "host ttl_remove bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ttl_remove bar",
    "ok": [
      "OK: : removed TTL for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": 3600,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {
          "ttl": ""
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host txt_add bar \"Lorem ipsum dolor sit amet\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host txt_add bar \"Lorem ipsum dolor sit amet\"",
    "ok": [
      "OK: : Added TXT record to bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/txts/",
        "data": {
          "host": 14,
          "txt": "Lorem ipsum dolor sit amet"
        },
        "status": 201,
        "response": {
          "txt": "Lorem ipsum dolor sit amet",
          "host": 14
        }
      }
    ],
    "time": null
  },
  {
    "command": "host txt_show bar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host txt_show bar",
    "ok": [
      "OK: : showed TXT records for bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [
      "TXT: v=spf1 -all",
      "TXT: Lorem ipsum dolor sit amet"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            },
            {
              "txt": "Lorem ipsum dolor sit amet",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/txts/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 2,
          "next": null,
          "previous": null,
          "results": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            },
            {
              "txt": "Lorem ipsum dolor sit amet",
              "host": 14
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host txt_remove bar \"Whatever\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host txt_remove bar \"Whatever\" # no match",
    "ok": [],
    "warning": [
      "WARNING: : bar.example.org has no TXT records equal: Whatever"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            },
            {
              "txt": "Lorem ipsum dolor sit amet",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/txts/?host=14&txt=Whatever",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host txt_remove bar \"Lorem ipsum dolor sit amet\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host txt_remove bar \"Lorem ipsum dolor sit amet\"",
    "ok": [
      "OK: : deleted TXT records from bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            },
            {
              "txt": "Lorem ipsum dolor sit amet",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/txts/?host=14&txt=Lorem+ipsum+dolor+sit+amet",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "txt": "Lorem ipsum dolor sit amet",
              "host": 14
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/txts/16",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add *.example.org -force",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add *.example.org -force",
    "ok": [
      "OK: : created host *.example.org"
    ],
    "warning": [
      "WARNING: : host not found: *.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=%2A.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/*.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=%2A.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "*.example.org",
          "contact": null,
          "comment": null
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host remove *.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove *.example.org",
    "ok": [
      "OK: : removed *.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/%2A.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 17
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "*.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=17",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=%2A.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/*.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host remove bar -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove bar -f",
    "ok": [
      "OK: : removed bar.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 14
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 14
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 14
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "bar.example.org",
          "contact": "me@example.org",
          "ttl": null,
          "comment": "This is the comment",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=14",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=bar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/bar.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host remove baz -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove baz -f",
    "ok": [
      "OK: : removed baz.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv4>",
              "host": 15
            },
            {
              "macaddress": "<IPv6>",
              "ipaddress": "<IPv6>",
              "host": 15
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 15
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "baz.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/2001%3Adb8%3A%3A14",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv6>::/64",
          "description": "dolor sit amet",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=15",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=baz.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/baz.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host remove clover",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove clover",
    "ok": [
      "OK: : removed clover.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/clover.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 16
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "clover.example.org",
          "contact": "",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=16",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=clover.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/clover.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "ok": [
      "OK: : created host foo.example.org with IP <IPv4>"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "comment": null,
          "ipaddress": "<IPv4>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host mx_add foo 10 mail.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host mx_add foo 10 mail.example.org",
    "ok": [
      "OK: : Added MX record to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 18
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 18
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/mxs/",
        "data": {
          "host": 18,
          "priority": 10,
          "mx": "mail.example.org"
        },
        "status": 201,
        "response": {
          "priority": 10,
          "mx": "mail.example.org",
          "host": 18
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo # Should fail, because it has an MX record, must force and override with 'mx'",
    "ok": [],
    "warning": [
      "WARNING: : foo.example.org requires force and override for deletion:\n 1 MX records, override with 'mx'\n - mail.example.org (priority: 10)"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 18
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 18
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 18
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=18",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo -force -override mx",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo -force -override mx",
    "ok": [
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 18
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 18
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 18
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=18",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "ok": [
      "OK: : created host foo.example.org with IP <IPv4>"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "comment": null,
          "ipaddress": "<IPv4>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host ptr_add <IPv4> foo.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ptr_add <IPv4> foo.example.org",
    "ok": [
      "OK: : Added PTR record <IPv4> to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 19
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 19
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/ptroverrides/?ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/ptroverrides/",
        "data": {
          "host": 19,
          "ipaddress": "<IPv4>"
        },
        "status": 201,
        "response": {
          "ipaddress": "<IPv4>",
          "host": 19
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo # Should fail, because it has a PTR record, must force and override with 'ptr'",
    "ok": [],
    "warning": [
      "WARNING: : foo.example.org requires force and override for deletion:\n 1 PTR records, override with 'ptr'\n - <IPv4>"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 19
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 19
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 19
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=19",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo -force -override ptr",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo -force -override ptr",
    "ok": [
      "OK: : deleted PTR record <IPv4> when removing foo.example.org",
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 19
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 19
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 19
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=19",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "ok": [
      "OK: : created host foo.example.org with IP <IPv4>"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "comment": null,
          "ipaddress": "<IPv4>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host naptr_add -name foo -preference 16384 -order 3 -flag u -service \"SIP\" -regex \"[abc]+\" -replacement \"wonk\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host naptr_add -name foo -preference 16384 -order 3 -flag u -service \"SIP\" -regex \"[abc]+\" -replacement \"wonk\"",
    "ok": [
      "OK: : created NAPTR record for foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 20
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 20
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/naptrs/",
        "data": {
          "preference": 16384,
          "order": 3,
          "flag": "u",
          "service": "SIP",
          "regex": "[abc]+",
          "replacement": "wonk",
          "host": 20
        },
        "status": 201,
        "response": {
          "preference": 16384,
          "order": 3,
          "flag": "u",
          "service": "SIP",
          "regex": "[abc]+",
          "replacement": "wonk",
          "host": 20
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo",
    "ok": [],
    "warning": [
      "WARNING: : foo.example.org requires force and override for deletion:\n 1 NAPTR records, override with 'naptr'\n - wonk"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 20
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 20
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=20",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "preference": 16384,
              "order": 3,
              "flag": "u",
              "service": "sip",
              "regex": "[abc]+",
              "replacement": "wonk",
              "host": 20
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo -force -override naptr",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo -force -override naptr",
    "ok": [
      "OK: : deleted NAPTR record wonk when removing foo.example.org",
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 20
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 20
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=20",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "preference": 16384,
              "order": 3,
              "flag": "u",
              "service": "sip",
              "regex": "[abc]+",
              "replacement": "wonk",
              "host": 20
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "ok": [
      "OK: : created host foo.example.org with IP <IPv4>"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "comment": null,
          "ipaddress": "<IPv4>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host srv_add -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host foo.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host srv_add -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host foo.example.org",
    "ok": [
      "OK: : Added SRV record _sip._tcp.example.org with target foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/_sip._tcp.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 21
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 21
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/srvs/",
        "data": {
          "name": "_sip._tcp.example.org",
          "priority": "10",
          "weight": "5",
          "port": "3456",
          "host": 21,
          "ttl": null
        },
        "status": 201,
        "response": {
          "name": "_sip._tcp.example.org",
          "priority": 10,
          "weight": 5,
          "port": 3456,
          "ttl": null,
          "zone": 1,
          "host": 21
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo # Should fail, because it has an SRV record, must force and override with 'srv'",
    "ok": [],
    "warning": [
      "WARNING: : foo.example.org requires force and override for deletion:\n 1 SRV records, override with 'srv'\n - _sip._tcp.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 21
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 21
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=21",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "_sip._tcp.example.org",
              "priority": 10,
              "weight": 5,
              "port": 3456,
              "ttl": null,
              "zone": 1,
              "host": 21
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo -force -override srv",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo -force -override srv",
    "ok": [
      "OK: : deleted SRV record _sip._tcp.example.org when removing foo.example.org",
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 21
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 21
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=21",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "_sip._tcp.example.org",
              "priority": 10,
              "weight": 5,
              "port": 3456,
              "ttl": null,
              "zone": 1,
              "host": 21
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "ok": [
      "OK: : created host foo.example.org with IP <IPv4>"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "comment": null,
          "ipaddress": "<IPv4>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host cname_add foo fubar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host cname_add foo fubar",
    "ok": [
      "OK: : Added cname alias fubar.example.org for foo.example.org"
    ],
    "warning": [
      "WARNING: : host not found: 'fubar.example.org'"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 22
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 22
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/fubar.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?cnames__name=fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/cnames/",
        "data": {
          "host": 22,
          "name": "fubar.example.org"
        },
        "status": 201,
        "response": {
          "name": "fubar.example.org",
          "ttl": null,
          "zone": 1,
          "host": 22
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo # Should fail, because it has a CNAME record, must force and override with 'cname'",
    "ok": [],
    "warning": [
      "WARNING: : foo.example.org requires force and override for deletion:\n 1 cnames, override with 'cname'\n - fubar.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 22
            }
          ],
          "cnames": [
            {
              "name": "fubar.example.org",
              "ttl": null,
              "zone": 1,
              "host": 22
            }
          ],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 22
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=22",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo -force -override cname",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo -force -override cname",
    "ok": [
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 22
            }
          ],
          "cnames": [
            {
              "name": "fubar.example.org",
              "ttl": null,
              "zone": 1,
              "host": 22
            }
          ],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 22
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=22",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host add foo -ip <IPv4> -contact \"foo@example.org\"",
    "ok": [
      "OK: : created host foo.example.org with IP <IPv4>"
    ],
    "warning": [
      "WARNING: : host not found: foo.example.org"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?ipaddresses__ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/hosts/",
        "data": {
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "comment": null,
          "ipaddress": "<IPv4>"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "host mx_add foo 10 mail.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host mx_add foo 10 mail.example.org",
    "ok": [
      "OK: : Added MX record to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "cnames": [],
          "mxs": [],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 23
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/mxs/",
        "data": {
          "host": 23,
          "priority": 10,
          "mx": "mail.example.org"
        },
        "status": 201,
        "response": {
          "priority": 10,
          "mx": "mail.example.org",
          "host": 23
        }
      }
    ],
    "time": null
  },
  {
    "command": "host ptr_add <IPv4> foo.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host ptr_add <IPv4> foo.example.org",
    "ok": [
      "OK: : Added PTR record <IPv4> to foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 23
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 23
            }
          ],
          "ptr_overrides": [],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/ptroverrides/?ipaddress=<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/ip/<IPv4>",
        "data": {},
        "status": 200,
        "response": {
          "excluded_ranges": [],
          "network": "<IPv4>/24",
          "description": "lorem ipsum",
          "vlan": null,
          "dns_delegated": false,
          "category": "",
          "location": "",
          "frozen": false,
          "reserved": 3
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/reserved_list",
        "data": {},
        "status": 200,
        "response": [
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>",
          "<IPv4>"
        ]
      },
      {
        "method": "POST",
        "url": "/api/v1/ptroverrides/",
        "data": {
          "host": 23,
          "ipaddress": "<IPv4>"
        },
        "status": 201,
        "response": {
          "ipaddress": "<IPv4>",
          "host": 23
        }
      }
    ],
    "time": null
  },
  {
    "command": "host naptr_add -name foo -preference 16384 -order 3 -flag u -service \"SIP\" -regex \"[abc]+\" -replacement \"wonk\"",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host naptr_add -name foo -preference 16384 -order 3 -flag u -service \"SIP\" -regex \"[abc]+\" -replacement \"wonk\"",
    "ok": [
      "OK: : created NAPTR record for foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 23
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 23
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/naptrs/",
        "data": {
          "preference": 16384,
          "order": 3,
          "flag": "u",
          "service": "SIP",
          "regex": "[abc]+",
          "replacement": "wonk",
          "host": 23
        },
        "status": 201,
        "response": {
          "preference": 16384,
          "order": 3,
          "flag": "u",
          "service": "SIP",
          "regex": "[abc]+",
          "replacement": "wonk",
          "host": 23
        }
      }
    ],
    "time": null
  },
  {
    "command": "host srv_add -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host foo.example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host srv_add -name \"_sip._tcp.example.org\" -priority 10 -weight 5 -port 3456 -host foo.example.org",
    "ok": [
      "OK: : Added SRV record _sip._tcp.example.org with target foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/_sip._tcp.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 23
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 23
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/srvs/",
        "data": {
          "name": "_sip._tcp.example.org",
          "priority": "10",
          "weight": "5",
          "port": "3456",
          "host": 23,
          "ttl": null
        },
        "status": 201,
        "response": {
          "name": "_sip._tcp.example.org",
          "priority": 10,
          "weight": 5,
          "port": 3456,
          "ttl": null,
          "zone": 1,
          "host": 23
        }
      }
    ],
    "time": null
  },
  {
    "command": "host cname_add foo fubar",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host cname_add foo fubar",
    "ok": [
      "OK: : Added cname alias fubar.example.org for foo.example.org"
    ],
    "warning": [
      "WARNING: : host not found: 'fubar.example.org'"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "cnames": [],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 23
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 23
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/fubar.example.org",
        "data": {},
        "status": 404,
        "response": {
          "detail": "Not found."
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?cnames__name=fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/cnames/?name=fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/hostname/fubar.example.org",
        "data": {},
        "status": 200,
        "response": {
          "zone": {
            "nameservers": [
              {
                "name": "ns2.example.org",
                "ttl": null
              }
            ],
            "updated": true,
            "primary_ns": "ns2.example.org",
            "email": "hostperson@example.org",
            "refresh": 360,
            "retry": 1800,
            "expire": 2400,
            "soa_ttl": 1800,
            "default_ttl": 300,
            "name": "example.org"
          }
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/cnames/",
        "data": {
          "host": 23,
          "name": "fubar.example.org"
        },
        "status": 201,
        "response": {
          "name": "fubar.example.org",
          "ttl": null,
          "zone": 1,
          "host": 23
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo # Should fail, because it has multiple records, must force and override with everything.",
    "ok": [],
    "warning": [
      "WARNING: : foo.example.org requires force and override for deletion:\n 1 cnames, override with 'cname'\n - fubar.example.org\n 1 MX records, override with 'mx'\n - mail.example.org (priority: 10)\n 1 NAPTR records, override with 'naptr'\n - wonk\n 1 SRV records, override with 'srv'\n - _sip._tcp.example.org\n 1 PTR records, override with 'ptr'\n - <IPv4>"
    ],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "cnames": [
            {
              "name": "fubar.example.org",
              "ttl": null,
              "zone": 1,
              "host": 23
            }
          ],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 23
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 23
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=23",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "preference": 16384,
              "order": 3,
              "flag": "u",
              "service": "sip",
              "regex": "[abc]+",
              "replacement": "wonk",
              "host": 23
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "_sip._tcp.example.org",
              "priority": 10,
              "weight": 5,
              "port": 3456,
              "ttl": null,
              "zone": 1,
              "host": 23
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "host remove foo -force -override mx,ptr,naptr,srv,cname",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "host remove foo -force -override mx,ptr,naptr,srv,cname",
    "ok": [
      "OK: : deleted NAPTR record wonk when removing foo.example.org",
      "OK: : deleted SRV record _sip._tcp.example.org when removing foo.example.org",
      "OK: : deleted PTR record <IPv4> when removing foo.example.org",
      "OK: : removed foo.example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "ipaddresses": [
            {
              "macaddress": "",
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "cnames": [
            {
              "name": "fubar.example.org",
              "ttl": null,
              "zone": 1,
              "host": 23
            }
          ],
          "mxs": [
            {
              "priority": 10,
              "mx": "mail.example.org",
              "host": 23
            }
          ],
          "txts": [
            {
              "txt": "v=spf1 -all",
              "host": 23
            }
          ],
          "ptr_overrides": [
            {
              "ipaddress": "<IPv4>",
              "host": 23
            }
          ],
          "hinfo": null,
          "loc": null,
          "bacnetid": null,
          "name": "foo.example.org",
          "contact": "foo@example.org",
          "ttl": null,
          "comment": "",
          "zone": 1
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/naptrs/?host=23",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "preference": 16384,
              "order": 3,
              "flag": "u",
              "service": "sip",
              "regex": "[abc]+",
              "replacement": "wonk",
              "host": 23
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/srvs/?host__name=foo.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "_sip._tcp.example.org",
              "priority": 10,
              "weight": 5,
              "port": 3456,
              "ttl": null,
              "zone": 1,
              "host": 23
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hosts/foo.example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv4>/24 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv4>/24 -f",
    "ok": [
      "OK: : removed network <IPv4>/24"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/<IPv4>/24/used_list",
        "data": {},
        "status": 200,
        "response": []
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/<IPv4>/24",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "network remove <IPv6>::/64 -f",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "network remove <IPv6>::/64 -f",
    "ok": [
      "OK: : removed network <IPv6>::/64"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64/used_list",
        "data": {},
        "status": 200,
        "response": []
      },
      {
        "method": "DELETE",
        "url": "/api/v1/networks/2001%3Adb8%3A%3A/64",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "label add postit 'This is a label'",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label add postit 'This is a label'",
    "ok": [
      "OK: : Added label \"postit\""
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "POST",
        "url": "/api/v1/labels/",
        "data": {
          "name": "postit",
          "description": "This is a label"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "label list",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label list",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name Description ",
      "postit This is a label "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/labels/?ordering=name",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "postit",
              "description": "This is a label"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "label info postit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label info postit",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: postit",
      "Description: This is a label",
      "Roles with this label:",
      "None",
      "Permissions with this label:",
      "None"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/labels/?name=postit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "postit",
              "description": "This is a label"
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?labels=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?labels=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "label rename postit mylabel",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label rename postit mylabel",
    "ok": [
      "OK: : Renamed label \"postit\" to \"mylabel\""
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/labels/?name=postit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "postit",
              "description": "This is a label"
            }
          ]
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/labels/1",
        "data": {
          "name": "mylabel"
        },
        "status": 204
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/1",
        "data": {},
        "status": 200,
        "response": {
          "name": "mylabel",
          "description": "This is a label"
        }
      }
    ],
    "time": null
  },
  {
    "command": "label set_description mylabel 'This is the new description'",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label set_description mylabel 'This is the new description'",
    "ok": [
      "OK: : Set description for label \"mylabel\" to \"This is the new description\""
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/labels/name/mylabel",
        "data": {},
        "status": 200,
        "response": {
          "name": "mylabel",
          "description": "This is a label"
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/labels/name/mylabel",
        "data": {
          "description": "This is the new description"
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "label remove mylabel",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label remove mylabel",
    "ok": [
      "OK: : Removed label \"mylabel\""
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "DELETE",
        "url": "/api/v1/labels/name/mylabel",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "label add postit 'A label again'",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label add postit 'A label again'",
    "ok": [
      "OK: : Added label \"postit\""
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "POST",
        "url": "/api/v1/labels/",
        "data": {
          "name": "postit",
          "description": "A label again"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "policy role_create myrole 'This is the description'",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy role_create myrole 'This is the description'",
    "ok": [
      "OK: : Created new role 'myrole'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=myrole",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "POST",
        "url": "/api/v1/hostpolicy/roles/",
        "data": {
          "name": "myrole",
          "description": "This is the description"
        },
        "status": 201
      }
    ],
    "time": null
  },
  {
    "command": "policy label_add postit myrole",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy label_add postit myrole",
    "ok": [
      "OK: : Added the label 'postit' to the role 'myrole'."
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/myrole",
        "data": {},
        "status": 200,
        "response": {
          "hosts": [],
          "atoms": [],
          "description": "This is the description",
          "name": "myrole",
          "labels": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/name/postit",
        "data": {},
        "status": 200,
        "response": {
          "name": "postit",
          "description": "A label again"
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hostpolicy/roles/myrole",
        "data": {
          "labels": [
            2
          ]
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy list_roles *",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy list_roles *",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Role Description Labels ",
      "myrole This is the description postit "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name__regex=.",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "This is the description",
              "name": "myrole",
              "labels": [
                2
              ]
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "postit",
              "description": "A label again"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy info myrole",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy info myrole",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: myrole",
      "Created: <TIME>",
      "Description: This is the description",
      "Atom members:",
      " None",
      "Labels:",
      " postit"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/atoms/?name=myrole",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=myrole",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "This is the description",
              "name": "myrole",
              "labels": [
                2
              ]
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/2",
        "data": {},
        "status": 200,
        "response": {
          "name": "postit",
          "description": "A label again"
        }
      }
    ],
    "time": null
  },
  {
    "command": "label info postit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label info postit",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: postit",
      "Description: A label again",
      "Roles with this label: ",
      " myrole",
      "Permissions with this label:",
      " None"
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/labels/name/postit",
        "data": {},
        "status": 200,
        "response": {
          "name": "postit",
          "description": "A label again"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?labels__name=postit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "This is the description",
              "name": "myrole",
              "labels": [
                2
              ]
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?labels__name=postit",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "policy label_remove postit myrole",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy label_remove postit myrole",
    "ok": [
      "OK: : Removed the label 'postit' from the role 'myrole'."
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/myrole",
        "data": {},
        "status": 200,
        "response": {
          "hosts": [],
          "atoms": [],
          "description": "This is the description",
          "name": "myrole",
          "labels": [
            2
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/name/postit",
        "data": {},
        "status": 200,
        "response": {
          "name": "postit",
          "description": "A label again"
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/hostpolicy/roles/myrole?labels=%5B%5D",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "policy role_delete myrole",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "policy role_delete myrole",
    "ok": [
      "OK: : Deleted role 'myrole'"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?name=myrole",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "hosts": [],
              "atoms": [],
              "description": "This is the description",
              "name": "myrole",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/hostpolicy/roles/myrole",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "permission network_add <IPv4>/16 mygroup .*",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_add <IPv4>/16 mygroup .*",
    "ok": [
      "OK: : Added permission to <IPv4>/16"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "POST",
        "url": "/api/v1/permissions/netgroupregex/",
        "data": {
          "range": "<IPv4>/16",
          "group": "mygroup",
          "regex": ".*"
        },
        "status": 201,
        "response": {
          "group": "mygroup",
          "range": "<IPv4>/16",
          "regex": ".*",
          "labels": []
        }
      }
    ],
    "time": null
  },
  {
    "command": "permission label_add <IPv4>/16 mygroup .* postit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission label_add <IPv4>/16 mygroup .* postit",
    "ok": [
      "OK: : Added the label 'postit' to the permission."
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?group=mygroup&range=<IPv4>%2F16&regex=.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "mygroup",
              "range": "<IPv4>/16",
              "regex": ".*",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/name/postit",
        "data": {},
        "status": 200,
        "response": {
          "name": "postit",
          "description": "A label again"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/2",
        "data": {},
        "status": 200,
        "response": {
          "group": "mygroup",
          "range": "<IPv4>/16",
          "regex": ".*",
          "labels": []
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/permissions/netgroupregex/2",
        "data": {
          "labels": [
            2
          ]
        },
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "permission network_list",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_list",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Range Group Regex Labels ",
      "<IPv4>/16 mygroup .* postit "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?ordering=range%2Cgroup",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "mygroup",
              "range": "<IPv4>/16",
              "regex": ".*",
              "labels": [
                2
              ]
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "postit",
              "description": "A label again"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "label info postit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label info postit",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Name: postit",
      "Description: A label again",
      "Roles with this label: ",
      " None",
      "Permissions with this label:",
      " IP range Group Reg.exp. ",
      " <IPv4>/16 mygroup .* "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/labels/name/postit",
        "data": {},
        "status": 200,
        "response": {
          "name": "postit",
          "description": "A label again"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hostpolicy/roles/?labels__name=postit",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?labels__name=postit",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "mygroup",
              "range": "<IPv4>/16",
              "regex": ".*",
              "labels": [
                2
              ]
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "permission label_remove <IPv4>/16 mygroup .* postit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission label_remove <IPv4>/16 mygroup .* postit",
    "ok": [
      "OK: : Removed the label 'postit' from the permission."
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?group=mygroup&range=<IPv4>%2F16&regex=.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "mygroup",
              "range": "<IPv4>/16",
              "regex": ".*",
              "labels": [
                2
              ]
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/name/postit",
        "data": {},
        "status": 200,
        "response": {
          "name": "postit",
          "description": "A label again"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/2",
        "data": {},
        "status": 200,
        "response": {
          "group": "mygroup",
          "range": "<IPv4>/16",
          "regex": ".*",
          "labels": [
            2
          ]
        }
      },
      {
        "method": "PATCH",
        "url": "/api/v1/permissions/netgroupregex/2?labels=%5B%5D",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "permission network_list",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_list",
    "ok": [],
    "warning": [],
    "error": [],
    "output": [
      "Range Group Regex Labels ",
      "<IPv4>/16 mygroup .* "
    ],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?ordering=range%2Cgroup",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "mygroup",
              "range": "<IPv4>/16",
              "regex": ".*",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/labels/",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "name": "postit",
              "description": "A label again"
            }
          ]
        }
      }
    ],
    "time": null
  },
  {
    "command": "permission network_remove <IPv4>/16 mygroup .*",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "permission network_remove <IPv4>/16 mygroup .*",
    "ok": [
      "OK: : Removed permission for <IPv4>/16"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/permissions/netgroupregex/?group=mygroup&range=<IPv4>%2F16&regex=.%2A",
        "data": {},
        "status": 200,
        "response": {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "group": "mygroup",
              "range": "<IPv4>/16",
              "regex": ".*",
              "labels": []
            }
          ]
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/permissions/netgroupregex/2",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "label remove postit",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "label remove postit",
    "ok": [
      "OK: : Removed label \"postit\""
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "DELETE",
        "url": "/api/v1/labels/name/postit",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  },
  {
    "command": "zone delete example.org",
    "command_filter": null,
    "command_filter_negate": false,
    "command_issued": "zone delete example.org",
    "ok": [
      "OK: : deleted zone example.org"
    ],
    "warning": [],
    "error": [],
    "output": [],
    "api_requests": [
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 200,
        "response": {
          "nameservers": [
            {
              "name": "ns2.example.org",
              "ttl": null
            }
          ],
          "updated": true,
          "primary_ns": "ns2.example.org",
          "email": "hostperson@example.org",
          "refresh": 360,
          "retry": 1800,
          "expire": 2400,
          "soa_ttl": 1800,
          "default_ttl": 300,
          "name": "example.org"
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/hosts/?zone=1",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "GET",
        "url": "/api/v1/zones/forward/?name__endswith=.example.org",
        "data": {},
        "status": 200,
        "response": {
          "count": 0,
          "next": null,
          "previous": null,
          "results": []
        }
      },
      {
        "method": "DELETE",
        "url": "/api/v1/zones/forward/example.org",
        "data": {},
        "status": 204
      }
    ],
    "time": null
  }
]